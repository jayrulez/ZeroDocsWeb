

.. _ObjectCreationGAM100:

.. rst-class:: SearchTitle

Object Creation
===============
 
.. rst-class:: SearchDescription

This lesson covers creating archetypes and using those archetypes to create objects at run-time.

.. _ObjectCreationVocabGAM100:

Learning Objectives
-------------------

*	Create archetypes.

*	Spawning instances of archetypes at runtime.

.. rst-class:: VocabSection

+----------------------------------------------+
| Vocabulary                                   |
+===========+=======+==========================+
| Archetype | Spawn | Instance of an Archetype |
+-----------+-------+--------------------------+

Create a New Project
--------------------

* :ref:`CreateNewProject`

Creating Objects with Code
--------------------------

Let's make a ball projectile Archetype.

* :ref:`Command<CommandsGAM100>` : ``CreateSprite`` or :menuselection:`Create --> Create Sprite`
* In the Properties Window

  * Set Name to: ``Ball``  
  * Under Transform
    
    * Set Scale to: ``[0.2, 0.2, 0.2]``
    
  * Under Sprite

    * Set Color to: ``[R: 255, G: 0, B: 0, A: 1.00]`` , ``#FF0000``
        
    * Set SpriteSource to: ``Circle``
        
  * :ref:`Add Component RigidBody <AddComponentGAM100>`
    
  * :ref:`Add Component SphereCollider <AddComponentGAM100>`
    
  * Under SphereCollider
    
    * Set Radius to: ``0.5``


**Upload to the Archetype Ball**

  * Set Archetype to: ``Ball``
    
  * Upload the archetype

    |UploadBall|
    
  * Now that it is uploaded, you can delete your object



Now let's add the ButtonSpawner script    

* :ref:`Add a new ZilchScript resource<ResourceAddingGAM100>` named: ``ButtonSpawner``

  * Change the **ButtonSpawner** script to this code:
    
.. code-block:: as    
    
    class ButtonSpawner : ZilchComponent
    {
      function Initialize(init : CogInitializer)
      {
        Zero.Connect(Zero.Keyboard, Events.KeyDown, this.OnKeyDown);
      }
      
      function OnKeyDown(event : KeyboardEvent)
      {
        // When space key is pressed
        if(event.Key == Keys.Space)
        {
          // Spawn at this object's current position
          var spawnPosition = this.Owner.Transform.Translation;
          
          // Find the Ball archetype:
          var archetypeToSpawn = Archetype.Ball;
          
          // Pass the archetype and position to the Space to make our object
          this.Space.CreateAtPosition(archetypeToSpawn, spawnPosition);
        }
      }
    }


    
**ButtonSpawner object**

  * :ref:`Command<CommandsGAM100>` : ``CreateSprite`` or :menuselection:`Create --> Create Sprite`

  * Under Properties

    * :ref:`Add Component ButtonSpawner <AddComponentGAM100>`
        
|ButtonSpawnerSettings|          
    
    * Set Name to: ``Spawner``

*  :ref:`Save your project <SavingProjectGAM100>` and :ref:`run your game <RunTheGameGAM100>`



*  Now press the ``Space`` bar

|ButtonSpawner|

*   :ref:`Stop the Game<StopGameGAM100>`

Modifying Created Objects
-------------------------

After you have created the object, you can access its components and modify their properties
Replace your **ButtonSpawner** script's **OnKeyDown** function with the following code to set the velocity so the ball will fire out.

.. code-block:: as        

    function OnKeyDown(event : KeyboardEvent)
    {
      // When space key is pressed
      if(event.Key == Keys.Space)
      {
        var spawnPosition = this.Owner.Transform.Translation;     
        
        // Find the Ball archetype:
        var archetypeToSpawn = Archetype.Ball;                
        
        // Pass the archetype and position to the Space to make our object
        var createdBall = this.Space.CreateAtPosition(archetypeToSpawn, spawnPosition);
        
        createdBall.RigidBody.Velocity = Real3(0,10,0);
      }
    }

*  :ref:`Save your project <SavingProjectGAM100>` and :ref:`run your game <RunTheGameGAM100>`
    
You should now see the balls travelling up instead of down when they spawn.

*   :ref:`Stop the Game<StopGameGAM100>`



Timed Spawning
--------------

Let's do a more complete example by making a TimedSpawner class.

* :ref:`Add a new ZilchScript resource<ResourceAddingGAM100>` named: ``TimedSpawner``

  * Change the **TimedSpawner** script to this code:

.. code-block:: as    
    
    class TimedSpawner : ZilchComponent
    {
      [Property]
      var WhatToSpawn : Archetype;
      
      function Initialize(init : CogInitializer)
      {
        // Connect to LogicUpdate event:
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
      }
      
      function OnLogicUpdate(event : UpdateEvent)
      {
        var spawnPosition = this.Owner.Transform.Translation;                
        
        this.Space.CreateAtPosition(this.WhatToSpawn, spawnPosition);
      }
    }



* :ref:`Select the Spawner object <SelectObjectGAM100>`

* Under Properties

  * :ref:`Remove the ButtonSpawner component <RemoveComponentGAM100>`
  * :ref:`Add the TimedSpawner component <AddComponentGAM100>`
  * Under TimedSpawner component
        
    * Set WhatToSpawn to: ``Ball``

 |TimedSpawnerSettingsWeb|


|TimedSpawnerSettingsBook|

        
* :ref:`Save your project <SavingProjectGAM100>` and :ref:`run the game <RunTheGameGAM100>`   

|UpdateSpawner|

*   :ref:`Stop the Game<StopGameGAM100>`



We have connected the OnLogicUpdate function to the LogicUpdate event so that it will be called every time game logic is updated. In the OnLogicUpdate method, we are creating an instance of the Ball. That will create a lot of balls very quickly. Instead, we want to create a ball only after a fixed period of time has passed.

Change the **TimedSpawner** code to look like this:

.. code-block:: as     

    class TimedSpawner : ZilchComponent
    {
      [Property]
      var WhatToSpawn : Archetype;
      
      [Property]
      var SpawnTime : Real = 1.0;
      
      var TimeSinceLastSpawn : Real = 0.0;
      
      function Initialize(init : CogInitializer)
      {
        // Connect to LogicUpdate event:
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
      }
      
      function OnLogicUpdate(event : UpdateEvent)
      {
        // Add the amount of time that has just passed (Delta Time)
        // to the time since last spawn
        this.TimeSinceLastSpawn += event.Dt;
        
        // If enough time has passed, spawn the ball
        if (this.TimeSinceLastSpawn > this.SpawnTime)
        {
          var spawnPosition = this.Owner.Transform.Translation;                
          
          this.Space.CreateAtPosition(this.WhatToSpawn, spawnPosition);
          
          // Need to reset the value
          this.TimeSinceLastSpawn = 0.0;
        }
      }
    }
    
* :ref:`Save your project <SavingProjectGAM100>` and :ref:`run the game <RunTheGameGAM100>`   



|TimedSpawner|

*   :ref:`Stop the Game<StopGameGAM100>`

On Your Own
-----------

Try:

* changing SpawnTime 
* creating new archetypes to spawn
* adding properties to the spawning component, for example:
  
  * number to spawn 
  * direction to fire

    
.. |BallSettings| image:: images/ObjectCreation/BallSettings.png
  :height: 4.0in

.. |UploadBall| image:: images/ObjectCreation/UploadBall.png

.. |ButtonSpawnerSettings| image:: images/ObjectCreation/ButtonSpawnerSettings.png 
  :height: 3.0in

.. |ButtonSpawner| image:: images/ObjectCreation/ButtonSpawner.gif

.. |ButtonSpawnerFire| image:: images/ObjectCreation/ButtonSpawnerFire.gif

.. |TimedSpawnerSettingsWeb| image:: images/ObjectCreation/TimedSpawnerSettings.png 

.. |TimedSpawnerSettingsBook| image:: images/ObjectCreation/TimedSpawnerSettings.png    
    :height: 4.0in

.. |UpdateSpawner| image:: images/ObjectCreation/UpdateSpawner.gif

.. |TimedSpawner| image:: images/ObjectCreation/TimedSpawner.gif

