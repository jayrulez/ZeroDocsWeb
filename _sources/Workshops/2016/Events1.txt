.. include:: BookFormattingShortcuts.rst

.. _2016Events1:

.. rst-class:: SearchTitle

Events
======

.. rst-class:: SearchDescription

Events are one of the most important features in Zero and are often used by other features in the engine. In this lesson we will cover **Spaces**, **Game Loops**, connecting to the **LogicUpdate** event, and some basic keyboard input.

.. _2016Events1Vocab:

Learning Objectives
-------------------

*	Gain a basic understanding of Spaces, Game Loops, and Events

*	Learn how to listen for an Event and define a response function 

*	Implement a countdown timer that makes use of the Dt (Delta Time) property of the LogicUpdate Event

.. rst-class:: VocabSection

+----------------------------------------------------+
| Vocabulary                                         |
+=======+======================+=====================+
| Event | Command              | Space               |
+-------+----------------------+---------------------+
| Level | Game Loop            | LogicUpdate         |
+-------+----------------------+---------------------+
| Dt    |                      |                     |
+-------+----------------------+---------------------+

Level Setup
-----------

* :ref:`2016CreateNewProject`

* :ref:`Command<2016Commands>` : ``CreateSpriteText`` or :menuselection:`Create --> Create SpriteText`
  
* :ref:`Select the SpriteText you created <2016SelectObject>`
  
* In the Properties Window

  * Set Name to: Timer
  
  * Under Transform
  
    * Set Translation to: ``[-10, 7, 0]``
	
* :ref:`Save the project <2016SavingProject>` 

Before we start talking about events there are a few topics we need to know about that will help us along the way.

Spaces
------

A :cpp:type:`Space` , like everything else in the engine, is still an object; however, unlike most game objects, **Spaces** do not represent an individual object. You may think of a **Space** as a container for a group of other objects, but more accurately it represents the real world space that a group of objects would inhabit if they existed in real life.

In a simple game you only have one space, which is where all your game objects go. Each space has its own set of interfaces for the core systems of the engine: graphics, physics, etc. Because of this, game objects in two different spaces will not collide or otherwise physically interact. Creating a separate space for UI or HUD is one of the most common uses of multiple spaces in a game.

|pbr|

*   Click anywhere in the Level Window
*   Press ``Shift+S`` or :menuselection:`Select --> Select Space` to bring up the properties of the current Space



Notice that the Property Window shows the space that all the objects in this level are contained in. You should see that the object count is ``5`` because there are five objects in the level. Looking at the object view it appears that there is only 4 objects in the level. However, there is an object which is not accessible or visible in every level called the ``WorldAnchor``.

|PWSpace|

One of the nice feature of :cpp:type:`Spaces` is that all game object that exist inside of a **Space** object have access to it inherently. This is very convenient and useful for events, and at times very dangerous, but we will talk about this more in a future lesson.

Game Loops
----------
In all games, there is a continuous element to the game play.
Consider *The Sims* for a moment.
The game continuously checks for player input, moves characters across the screen over several seconds, queues actions such as cleaning and eating to be done at the appropriate times, and more.

Using this example, you can break *The Sims* down into what is known in the games industry as a series of frames. Think of a single frame as one picture on a reel of film. When you string each of these frames together and play them back at a specific rate, you can see the movie that is on the film.

Much of the same idea applies to games. In our frames example, one frame consists of several common actions that are executed in a specific sequence. For instance, the game would first check for user input, then it would update the game logic that governs moving the characters, and finally, it would then draw that frame to the screen.

If this process of executing one frame of a game is looped at a specific rate, much like the film, the game comes alive and becomes real-time. This is precisely the concept of the game loop, where it loops the process of executing one frame of the game over and over again. It should be noted that in most games, as well as the Zero Engine, the game loop repeats at a rate of 60 frames per second. This is called the frame rate.

|pbr|

Events
------

Events are the main way that objects and components talk to each other in the Zero Engine, which follows a common programming pattern called the **Event-Listener** pattern. Events are messages that are sent to specific objects in reaction to something happening in the game. Like with any type of message, an Event often contains information about the circumstances that caused the Event to get dispatched. However, sometimes just the fact that the Event happened is all the information whoever is listening needs. The most commonly used Event in the engine, LogicUpdate, involves both Spaces and Game Loops. As an introduction to the LogicUpdate event that will also serve to provide a better understanding of events in general, we'll be making one of the common elements in a video game: the humble timer.

Adding the Timer ZilchScript
---------------------------------------

* :ref:`Add a new ZilchScript resource<2016ResourceAdding>` Named: ``Timer``
* In the **Timer** script

  * Update the **Timer** component with the following code:
  
.. code-block:: as

    class Timer : ZilchComponent
    {
        // This function is called when the object is created
        function Initialize(init : CogInitializer)
        {
            // Say hello:
            Console.WriteLine("Hello from Timer");
        }

        function OnLogicUpdate(event : UpdateEvent)
        {
            Console.WriteLine("updated");
        }
    }

.. _2016Events1TheLogicUpdateEvent:

    
The LogicUpdate Event
---------------------

When a :cpp:type:`Space` begins handling game logic, it dispatches an :cpp:type:`Event` to all the game objects who have connected to the ``Events.LogicUpdate`` event. This event is dispatched on the Space each frame and is generally used to run the game logic portion of the **Game Loop** discussed above. We want to have logic to update our objects every frame, so even without interaction, the game world can appear alive. This code we write, so that it can be called when an event is dispatched, is known as a **CallBack** function.

* Open the **Timer** script

In the generated code you'll see a function called OnLogicUpdate that accepts an event of type: ``UpdateEvent``. This is the **CallBack** function we will connect to respond to the ``UpdateEvent``.

* :ref:`Save the project <2016SavingProject>` 

|pbr|

* :ref:`Select the Timer Object <2016SelectObject>`
* In the Properties Window

  * :ref:`Add a Timer component <2016AddComponent>`

*   Open the Console Window via the ``Console`` command

*   In the Console Window

    *   Press ``Ctrl+Delete`` to clear the console

*   Press the ``F5`` key to :ref:`run the game <2016RunTheGame>`



This should be the output in the Console Window:

Console Output::

    ---------------- Begin Game  ----------------
    Hello from Timer
    Level 'Level' was loaded.
    Loaded level 0.00s  

We have actually connected to the **OnLogicUpdate** to respond to the ``UpdateEvent`` dispatched by the space so "updated" never gets printed; let's do that now.


Connecting to LogicUpdate
-------------------------

Remember that :cpp:type:`Events<Event>` are how the engine/objects/spaces inform you that something has happened and give you an opportunity to do something in response. When you want to respond to an event you need to connect to it. You connect a specific event (dispatched on to a specific object) to a specific function you've defined.

For example, lets say you connect a function called ApplyChanges() to the ButtonUp event of an object, OKButton. When the user clicks the OKButton, the ButtonUp event will be **dispatched** on the OKButton. Since you are **listening** to the OKButton for this event, when it is **dispatched**, the function you connected to, ApplyChanges(), will be called. 

It's important to connect them correctly, so you don't have your function called when you press the cancel button (wrong object) or when hovering over the button (wrong event). 

We want to **connect** to our **Space** , which is where the **LogicUpdate** event is dispatched. We will have our ``OnLogicUpdate`` function called when we receive the event. To do this we will use the ``Zero.Connect`` function.

*   In your **Timer** script

    *   Replace the code in the **Initialize** function with the following code:

    .. code-block:: as
    
        function Initialize(init : CogInitializer)
        {
            // Connect to the LogicUpdate event fired by the space:
            //       when the space    gets a LogicUpdate event   call my OnLogicUpdate function
            Zero.Connect(this.Space,   Events.LogicUpdate,        this.OnLogicUpdate);
        }

*   :ref:`Save the project <2016SavingProject>` & :ref:`Run the game <2016RunTheGame>`

|pbr|

We now know that our ``OnLogicUpdate`` function is being called because the word `updated` is repeatedly being printed in the Console Window:

Console Output::

    updated
    updated
    updated
    updated
    updated
    updated
    updated
    updated
    updated
    updated

As mentioned earlier events come in different types. The LogicUpdate event sends an **UpdateEvent** which contains how much time has passed in the space (**TimePassed**) and the change in time from the previous frame to this frame (denoted by **Dt** to represent *D*\ elta *t*\ ime) in **seconds**.

*   :ref:`Stop the Game <2016StopGame>` if it is currently open
*   Open the **Timer** script
*   Replace the code in the **OnLogicUpdate** function with the following code:

.. code-block:: as
 :emphasize-lines: 3,4
 
    function OnLogicUpdate(event : UpdateEvent)
    {
      Console.WriteLine("TimePassed: `event.TimePassed`");
      Console.WriteLine("Updated with dt of: `event.Dt`");
    }

*   :ref:`Run the game <2016RunTheGame>`

We should see the time passed (in seconds) is increasing by the Dt (delta time) of each frame:

            
Console Output::

    ---------------- Begin Game  ----------------
    Level 'Level' was loaded.
    Loaded level 0.00s  
    TimePassed: 0.0159611
    Updated with dt of: 0.0166567
    TimePassed: 0.0340954
    Updated with dt of: 0.0166567
    TimePassed: 0.0510914
    Updated with dt of: 0.0166567
    TimePassed: 0.068136
    Updated with dt of: 0.0166567
    TimePassed: 0.0851685
    Updated with dt of: 0.0166567
    TimePassed: 0.102257

|pbr|

Using Logic Update
------------------

There are many uses for the ``LogicUpdate`` event not the least of which is driving character behavior. Let's get our feet wet with a simpler example that is still applicable to games. A common feature in games is a timer that counts down to 0.0. Let's take a crack at updating the timer in our level every frame, counting down from a specified value.

* :ref:`Stop the Game <2016StopGame>` if it is currently open

* In the **Timer** script

  * Update the **Timer** component with the following code:
  
  .. code-block:: as

    class Timer : ZilchComponent
    {
      //The variable we will use to keep track of time and set the time from which to count down
      [Property]
      var Timer : Real = 0.0;
 
      // This function is called when the object is created
      function Initialize(init : CogInitializer)
      {
        // Connect to the LogicUpdate event fired by the space:
        //       when the space    gets a LogicUpdate event   call my OnLogicUpdate function
        Zero.Connect(this.Space,   Events.LogicUpdate,        this.OnLogicUpdate);
      }

      function OnLogicUpdate(event : UpdateEvent)
      {
        if(this.Timer >= 0.0)
        {
          //Subtracts Dt (passage of time each frame) from Timer so that it counts down to 0
          this.Timer -= event.Dt;
          
          //Rounds the timer to the second decimal place
          this.Timer = Math.Round(this.Timer, -2);
          
          //Sets the value of the SpriteText's Text property to this.Timer
          this.Owner.SpriteText.Text = "Timer: `this.Timer`";
        }
        else
        {
          this.Owner.SpriteText.Text = "Time's Up!";
        }
      }
    }



* :ref:`Select the Timer Object <2016SelectObject>`
* In the Properties Window

  * Under Timer

    * Set Timer to 60

* :ref:`Save the project <2016SavingProject>`
* :ref:`Run the game <2016RunTheGame>`

You should see the timer ticking down from ``60`` seconds.

Now we know how to implement a timer using LogicUpdate's ``Dt`` property.


Conclusions
-----------

Connecting to events is one of the most important things to learn in the engine. The Engine will send individual objects specific events based off what is happening in the game, events such as **LogicUpdate** and **CollisionEvents** (will be discussed in a later lesson) can drive a majority of your gameplay. Learning how to respond to the events correctly is core to your ability to function in the engine.


.. |PWSpace|                 image:: images/Events/PWSpace.PNG
  :height: 2.0in
.. |TimerRunning|            image:: images/Events/TimerRunning.gif

