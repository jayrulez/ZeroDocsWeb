.. include:: BookFormattingShortcuts.rst

.. _Resources2015:

.. rst-class:: SearchTitle

Resources
=========

.. rst-class:: SearchDescription

This lesson covers creating new Physics Materials and applying them to objects. Friction, density, restitution, and the Rotation Locked setting on the RigidBody component are also covered.

Create a New Project
--------------------

:ref:`CreateNewProject2015`

Level Setup
-----------

**Create a Ball**

*  :ref:`Command<Commands2015>` : ``CreateSprite`` or :menuselection:`Create --> Create Sprite`
    
*   :ref:`Select the newly created Sprite object <SelectObject2015>`
*   In the Properties Window

    *   Set Name to: Ball
    *   :ref:`Add the RigidBody component <AddComponent2015>`
    *   :ref:`Add the SphereCollider component <AddComponent2015>`
    *   Under Transform

        *   Set Translation to: [9, 3.5, 0]
    *   Under Sprite

        *   Set SpriteSource to: Circle
    *   Under SphereCollider

        *   Set Radius to: 0.5
        
**Create a Slope**
        
*  :ref:`Command<Commands2015>` : ``CreateSprite`` or :menuselection:`Create --> Create Sprite`
    
*   :ref:`Select the newly created Sprite object <SelectObject2015>`
*   In the Properties Window

    *   Set Name to: Slope
    *   :ref:`Add the RigidBody component <AddComponent2015>`
    *   :ref:`Add the BoxCollider component <AddComponent2015>`    
    *   Under Transform

        *   Set Translation to: [6, -6.5, 0]
        *   Set Rotation to: [0, 0, 30]
        *   Set Scale to: [20, 1, 1]
    *   Under RigidBody

        *   Set DynamicState to: Static

|pbr|
        
*   In the Objects Window

    *   :ref:`Select the Camera object <SelectObject2015>`
*   In the Properties Window
    
    *   Under Camera
        
        *   Set Size to: 30

Here is how the level should look after our initial setup:

|LWSetup|

*   :ref:`Save the project <SavingProject2015>` and :ref:`run the game <RunTheGame2015>`

The Ball object falls onto and rolls down the Slope object.

*   :ref:`Stop the Game <StopGame2015>`

Resources Overview
------------------

Resources are special objects shared throughout the engine, such as SpriteSources and Sounds. Unlike components, changing properties of a resource affects all those game objects who reference it due to its shared nature. Most resources are added via the **Add** command, although certain tools, such as the TileEditor2D, can create them as well. All created Resources can be found in the Library window.

Physics Materials
-----------------

Physics Materials are resources that determine the density, restitution (bounciness), and friction of an object. 

Friction
~~~~~~~~

Friction is the what you feel when you try to push something across a surface. When there is a lot of friction, it is hard to push an object; when there is little, it is easier to push an object.

Here is a diagram that attempts to briefly summarize the physics mathematically :

    |FrictionDiagram_png|

Friction is the force applied on an object when it touches another object. Friction always acts in the opposite direction of movement (or attempted movement). For example, in order to push a box sitting on a table, the pushing force applied on the box would have to be greater than the friction generated by the box touching the table. The properties of both the box's surface and the table's surface will determine how much resistive force (friction) will be present between them. In the Zero Engine the PhysicsMaterial's **Friction** property is used with calculations for the the normal force to simulate this effect.

Adding a PhysicsMaterial
------------------------

*   :ref:`Command<Commands2015>` : ``Add`` or :menuselection:`Resource --> Add`
    
*   In the Add Window

    *   Select PhysicsMaterial
    *   Set Name to: Slippery

        |NoBookSingleLine| |AWSlipperyWeb|
        
        |NoWebBegin|
        |AWSlipperyBook|
        |NoWebEnd|

    *   Click the Create button

The newly created Slippery PhysicsMaterial should open in the Properties Window.

*   In the Properties Window

    *   Set Friction to: 0

        |PWSlippery| 

*   :ref:`Select the Slope object <SelectObject2015>`
*   In the Properties Window

    *   Under **BoxCollider**

        *   Set Material to: Slippery
*   :ref:`Save the project <SavingProject2015>` and :ref:`run the game <RunTheGame2015>`

This time the Ball object slides down the Slope object faster than before. Having less friction means that a lesser amount of force is required for movement between the touching objects.

*   :ref:`Stop the Game <StopGame2015>`

Restitution
~~~~~~~~~~~

The PhysicsMaterial's **Restitution** property can be thought of as the bounciness, but it is actually the value representing the percentage of energy retained when a collision happens. If an object was moving fast when it collided with another object, how much of its speed will be retained after the collision? The restitution value will contribute to the outcome of these scenarios.

The following diagram attempts to briefly summarize how the collision will be resolved in the situation where there is no restitution (bounciness):

.. sidebar:: Values of Restitution
  
  Although the slider goes from 0-1 (ranging from retaining no energy to retaining it all) you can still right click and insert other values. 
  
  If the value is:
  
  ``less than 0`` : it is clamped or set to zero, and thus retains no energy.
  
  ``between 0 and 1`` : it works the same way as using the slider does.
  
  ``greater than 1`` : then it *adds* energy with every collision e.g. having a restitution of 2 would *double* the energy with every collision.

|RestitutionDiagram_png|
  
  Beware of setting Restitution above 1 as the speed of the objects can become out of control fast!
    
*    :ref:`Add a new PhysicsMaterial resource<ResourceAdding2015>` named: 'Bouncy' 

    *   In the Properties Window
    
        *   Set Restitution to: 1

|pbr|

*   :ref:`Select the Ball object <SelectObject2015>`

    *   In the Properties Window
    
        *   Under **SphereCollider**
    
            *   Set Material to: Bouncy
            
*   :ref:`Save the project <SavingProject2015>` and :ref:`run the game <RunTheGame2015>`

The Ball object now has the **Bouncy** PhysicsMaterial instead of the **DefaultPhysicsMaterial** PhysicsMaterial, so it bounces more due to the higher restitution value. Here is the Ball object bouncing higher than previously:

|LWBouncy|

High Priority
+++++++++++++

Two colliding objects will have their own restitution values based on their PhysicsMaterial, but the restitution value used will be whichever one is larger. This will be true if both PhysicsMaterials' HighPriority property is the same (both is True or both is False). If only one of the PhysicsMaterials' HighPriority property is set to True, then that PhysicsMaterial's restitution will be used.

|pbr|

Density
~~~~~~~

The mass of an object is determined by the density times the volume of the object. This means that two objects can be the same size, but if one of those objects is more dense, then that object will be "heavier" than the other. The following diagram attempts to briefly summarize the situation:

    |DensityDiagram_png|

*   :ref:`Stop the Game <StopGame2015>`

.. sidebar:: Zero Density
  
  When experimenting with PhysicsMaterials you might try having a Density of 0. This 
  makes an object massless. 
  
  If there is no mass:
  
  ``F=ma => F=0*a => F=0`` 
  
  Therefore no force is applied to simulate this object's collision and *things pass through it!*
  
  This is useful when you want to add colliders that can send 
  messages upon collision **without** worrying about its effects on the object's overall physics (by adding mass). 

|pbr|

**Create SupportBlock**

*   :ref:`Command<Commands2015>` : ``CreateSprite`` or :menuselection:`Create --> Create Sprite`
    
*   :ref:`Select the newly created Sprite object <SelectObject2015>`
*   In the Properties Window

    *   Set Name to: SupportBlock
    *   :ref:`Add the RigidBody component <AddComponent2015>`
    *   :ref:`Add the BoxCollider component <AddComponent2015>`    
    *   Under RigidBody

        *   Set DynamicState to: Static

**Create BalanceBar**        
        
*   :ref:`Command<Commands2015>` : ``CreateSprite`` or :menuselection:`Create --> Create Sprite`
    
*   :ref:`Select the newly created Sprite object <SelectObject2015>`
*   In the Properties Window

    *   Set Name to: BalanceBar
    *   :ref:`Add the RigidBody component <AddComponent2015>`
    *   :ref:`Add the BoxCollider component <AddComponent2015>`    
    *   Under Transform

        *   Set Translation to: [0, 1, 0]
        *   Set Scale to: [10, 2, 1]
        
**Create Squares**        
        
*   :ref:`Command<Commands2015>` : ``CreateSprite`` or :menuselection:`Create --> Create Sprite`
    
*   :ref:`Select the newly created Sprite object <SelectObject2015>`
*   In the Properties Window

    *   Set Name to: SquareA
    *   :ref:`Add the RigidBody component <AddComponent2015>`
    *   :ref:`Add the BoxCollider component <AddComponent2015>`    
    *   Under Transform

        *   Set Translation to: [-4.5, 7, 0]
*   Copy and Paste SquareA

|pbr|

*   In the Properties Window

    *   Set Name to: SquareB
    *   Under Transform

        *   Set Translation to: [4.5, 7, 0]
*   :ref:`Save the project <SavingProject2015>` 

This setup will allow us to see the results of setting an object's PhysicsMaterial to a PhysicsMaterial with a higher density.

Here is what the level should look like:

|NoBookSingleLine| |LWDensitySetupWeb|

|NoWebBegin|
|LWDensitySetupBook|
|NoWebEnd|

*   :ref:`Run the game <RunTheGame2015>`

The SquareA and SquareB objects should fall and land on the BalanceBar object:

|GWDensitySetup|

The BalanceBar object does not tip over because both objects have the same volume and density, which results in the same mass.

*   :ref:`Stop the Game <StopGame2015>`
*   :ref:`Add a new PhysicsMaterial resource<ResourceAdding2015>` named: 'Heavy' 
*   In the Properties Window

    *   Set Density to: 25

        |PWDensity25|
    
*   :ref:`Select the SquareB object <SelectObject2015>`
*   In the Properties Window

    *   Under **BoxCollider**

        *   Set Material to: Heavy

            |PWSquareBHeavy|

*   :ref:`Save the project <SavingProject2015>` and :ref:`run the game <RunTheGame2015>`

|pbr|

The SquareB object now has a larger density so the BalanceBar tips over:

|GWDensitySquareBHeavy|

RigidBody Setting: Rotation Locked
----------------------------------

Let's experiment with the the RigidBody component. 

What if we didn't want our BalanceBar to rotate? What would happen if it couldn't rotate?

*   :ref:`Select the BalanceBar object <SelectObject2015>`
*   In the Properties Window

    *   Under RigidBody
        
        *   Set RotationLocked to: True
        
*   :ref:`Save the project <SavingProject2015>` and :ref:`run the game <RunTheGame2015>`

|pbr|

|GWDensityRotationLocked|

*Notice the Heavy square still bounces higher*

Because none of the energy could rotate the object the blocks landed similar to when they were of equal weight.

Now we know how to add resources, create new PhysicsMaterials, and alter the PhysicsMaterial properties and RigidBody settings that change the way objects interact with physics.

.. |PWDensity25|                          image:: images/Resources/PWDensity25.png
.. |LWBouncy|                             image:: images/Resources/LWBouncy.png
.. |AWSlipperyWeb|                        image:: images/Resources/AWSlippery.png
.. |AWSlipperyBook|                       image:: images/Resources/AWSlippery.png
    :height: 2.0in

.. |PWSquareBHeavy|                       image:: images/Resources/PWSquareBHeavy.png
.. |GWDensitySetup|                       image:: images/Resources/GWDensitySetup.png
    :height: 3.0in
.. |GWDensitySquareBHeavy|                image:: images/Resources/GWDensitySquareBHeavy.png
    :height: 3.0in
.. |LWSetup|                              image:: images/Resources/LWSetup.png
.. |FrictionDiagram_png|                  image:: images/Resources/FrictionDiagram.png
    :width: 4.0in
    :height: 4.0in

.. |DensityDiagram_png|                   image:: images/Resources/DensityDiagram.png
    :width: 4.0in
    :height: 4.0in

.. |LWDensitySetupWeb|                    image:: images/Resources/LWDensitySetup.png   
.. |LWDensitySetupBook|                   image:: images/Resources/LWDensitySetup.png
    :height: 3.0in

.. |PWSlippery|                           image:: images/Resources/PWSlippery.png 
.. |PWBouncy|                             image:: images/Resources/PWBouncy.png
.. |RestitutionDiagram_png|               image:: images/Resources/RestitutionDiagram.png
    :width: 4.0in
    :height: 4.0in

.. |GWDensityRotationLocked|              image:: images/Resources/GWDensityRotationLocked.png
    :height: 3.0in

