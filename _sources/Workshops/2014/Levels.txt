.. _Levels2014:

.. rst-class:: SearchTitle

Levels
======

.. rst-class:: SearchDescription

This lesson covers reloading levels, changing levels, duplicating levels, and setting the starting level.

Create a New Project
--------------------

:ref:`CreateNewProject2014`

Level Setup
-----------

**Create a Sprite**

* :ref:`Command<Commands2014>` : ``CreateSprite`` or :menuselection:`Create --> Create Sprite`
* In the Properties Window

  * :ref:`Add the RigidBody Component <AddComponent2014>`

Here is what our level should look like:

|Level1Start|

* :ref:`Save the project <SavingProject2014>` and :ref:`run the game <RunTheGame2014>`

The Sprite should fall due to the default gravity in conjunction with our RigidBody component.

* :ref:`Stop the Game <StopGame2014>`

Renaming a Level
----------------

* In the Library Window

  * In the Level tab

    * ``Right-Click`` on **Level** and select rename level

      |RenameLevel1|

    * Rename the level to: **Level1**
* :ref:`Save the project <SavingProject2014>`

Reloading a Level
-----------------

Now we will go over reloading the currently loaded level in code.

* :ref:`Add a new ZilchScript resource<ResourceAdding2014>` named: 'GameLogic'

* Update the **GameLogic** script with the following code:

  * Update the **Initialize** function with the following code:

    .. code-block:: as    
      :emphasize-lines: 3,4

        function Initialize(init : CogInitializer)
        {
            // Connect to LogicUpdate event.
            Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        }

  * Update the **OnLogicUpdate** function with the following code:

    .. code-block:: as    
      :emphasize-lines: 3-8
        
        function OnLogicUpdate(event : UpdateEvent)
        {
            // When Space is pressed,
            if (Zero.Keyboard.KeyIsPressed(Keys.Space))
            {
                // reload the level.
                this.Space.ReloadLevel();
            }
        }    


In this code we are calling the Space's **ReloadLevel** function to reload the currently loaded level when Space is pressed on the keyboard.

* In the Objects Window

  * :ref:`Select the LevelSettings object <SelectObject2014>`
* In the Properties Window

  * :ref:`Add the GameLogic component <AddComponent2014>`
* :ref:`Save the project <SavingProject2014>` and :ref:`run the game <RunTheGame2014>`

The Sprite will fall. Pressing the Space will reload the level.

* :ref:`Stop the Game <StopGame2014>`

Adding Levels
-------------

Creating a new level is similar to creating a new ZilchScript.

* :ref:`Add a new Level resource<ResourceAdding2014>` named: 'Level2'

  |AddLevel2|

  * Click the Create button

The newly created level should now be the level you are editing in the editor.

**Create a sprite**

* :ref:`Command<Commands2014>` : ``CreateSprite`` or :menuselection:`Create --> Create Sprite`
* In the Properties Window

  * :ref:`Add the RigidBody Component <AddComponent2014>`

**Create another sprite**

* In the Objects Window

  * Select the object we just created
  * Copy, ``Ctrl+C``, and paste, ``Ctrl+V``, the Sprite
  * Select the object we just created

|pbr|
    
* In the Properties Window

  * Under Transform

    * Set Translation to: [2,0,0]

Here is what the level should look like:

|Level2Screenshot|

* :ref:`Save the project <SavingProject2014>` and :ref:`run the game <RunTheGame2014>`

This level has 2 sprites so that we know it's Level2. The Sprite objects are falling, but when we press Space, the level doesn't reload. This is because the newly created level doesn't have our GameLogic component attached to the LevelSettings object. *Making an archetype for the LevelSettings object is NOT what we want to do here* because the LevelSettings object is a special object that is handled internally, and doing so **will cause undefined behavior.** This can be avoided by simply making a template level and then duplicating it, but for now let's just do it from scratch.

* :ref:`Stop the Game <StopGame2014>`

|pbr|

* :ref:`Select the LevelSettings object <SelectObject2014>`
* In the Properties Window

  * :ref:`Add the GameLogic component <AddComponent2014>`
    
    |AddGameLogic|

The LevelSettings object in Level2 should have the same properties as LevelSettings object in Level1:

|SameProperties|

* :ref:`Save the project <SavingProject2014>` and :ref:`run the game <RunTheGame2014>`

The level should now be able to be reset just like in Level1.

* :ref:`Stop the Game <StopGame2014>`

|pbr|

Changing Levels
---------------

Now we will go over changing from one level to another. The Space's **LoadLevel** member function accepts a Level Resource. We can find the Levels by looking them up by name like we do with Archetypes, using the **Find** function. The Space's **CurrentLevel** member returns the current level's Level Resource.

* Open the **GameLogic** script

* Change the **OnLogicUpdate** function to the following code:

.. code-block:: as
  :emphasize-lines: 10-32

    function OnLogicUpdate(event : UpdateEvent)
    {
        // When Space is pressed,
        if (Zero.Keyboard.KeyIsPressed(Keys.Space))
        {
            // reload the level.
            this.Space.ReloadLevel();
        }
        
        // If we press the right arrow:
        if (Zero.Keyboard.KeyIsPressed(Keys.Right))
        {
            // Get the name of the currently loaded level:
            var currentLevelName = this.Space.CurrentLevel;
            
            // Get the Levels to compare against:
            var level1 =  Level.Find("Level1");
            var level2 =  Level.Find("Level2");
            
            // If we are on Level1,
            if (currentLevelName == level1)
            {
                // switch to Level2.
                this.Space.LoadLevel(level2);
            }
            // Otherwise, if we are on Level2
            else if (currentLevelName == level2)
            {
                // switch to Level1.
                this.Space.LoadLevel(level1);
            }
        }
    }
    
This code gets the name of the current level and checks if it is Level1 or Level2. Then it loads the other level. In other words, if Level1 is the current level, then Level2 will be loaded, and if Level2 is the current level, then Level1 will be loaded.

* :ref:`Save the project <SavingProject2014>` and :ref:`run the game <RunTheGame2014>`

Pressing the Right arrow key on the keyboard will switch between the two levels. We have one sprite in Level1, and we have two sprites in Level2.

* :ref:`Stop the Game <StopGame2014>`

|pbr|

Duplicating Levels
------------------

We have renamed the level that is created by default, and we added a brand new level. Now we will go over duplicating or making a copy of a level that already exists.

* In the Library Window

  * In the Level tab

    * ``Right-Click`` on Level2 and select Duplicate from the drop-down selection

      |DuplicateLevel|

A copy of Level2 should be created:

|LevelCopied|

* ``Right-Click`` on Level2Copy1 and select Rename

    |RenameLevelCopied|

|pbr|
* Rename Level2Copy1 to: Level3

    |RenamedLevel3|

* ``Double-Click`` on Level3 to open it for editing
* Paste a copy of one of the sprites in the level
* :ref:`Select the copy you made <SelectObject2014>`
* In the Properties Window

  * Set Translation to: [-2, 0, 0]

We now have 3 sprites in the level so that we know it is level 3 just by looking at it:

|Level3Screenshot|

* :ref:`Save the project <SavingProject2014>` and :ref:`run the game <RunTheGame2014>`

The sprites fall and we are able to restart the level with the Space, but pressing the right arrow key on the keyboard isn't doing what it used to do. This is because our logic only accounted for the first two levels and switching back and forth between them.

* :ref:`Stop the Game <StopGame2014>` and open the GameLogic script

* Change the **OnLogicUpdate** function to the following code:

.. code-block:: as
  :emphasize-lines: 10-27
  
    function OnLogicUpdate(event : UpdateEvent)
    {
        // When Space is pressed,
        if (Zero.Keyboard.KeyIsPressed(Keys.Space))
        {
            // reload the level.
            this.Space.ReloadLevel();
        }
        
        // If we press 1,
        if (Zero.Keyboard.KeyIsPressed(Keys.One))
        {
            // load Level1.
            this.Space.LoadLevel( Level.Find("Level1"));
        }
        // Otherwise, if we press 2,
        else if (Zero.Keyboard.KeyIsPressed(Keys.Two))
        {
            // load Level2.
            this.Space.LoadLevel(Level.Find("Level2"));
        }
        // Otherwise, if we press 3,
        else if (Zero.Keyboard.KeyIsPressed(Keys.Three))
        {
            // load Level3.
            this.Space.LoadLevel(Level.Find("Level3"));
        }
    }  

* :ref:`Save the project <SavingProject2014>` and :ref:`run the game <RunTheGame2014>`

Now pressing the numbers ``1``, ``2``, and ``3`` keys will load Level1, Level2, and Level3 respectively.

* :ref:`Stop the Game <StopGame2014>`


|pbr|

Setting the Starting Level for the Game
---------------------------------------

What if we wanted a specific level (such as a main menu, intro level, or tutorial level) to be the first level that is loaded when the game starts. In other words, the initial level that is loaded when the user actually runs the game outside of the editor (from the executable or independent of the Zero Engine).

One way of doing this is the **SetAsStartingLevel** command.

* In the Level Window

  * Press ``Shift+G``

    |Game|

* In the Properties Window
    
  * Set the StartingLevel to: Level3

Level3 now will be the level that is loaded when the game starts outside of the Zero Engine.

Now we know how to restart/reload, change, create, and duplicate levels.

.. |Level1Start|                  image:: images/Levels/Level1Start.png
    :width: 8.35in
.. |Game|                         image:: images/Levels/Game.png
.. |LevelCopied|                  image:: images/Levels/LevelCopied.png
.. |Level3Screenshot|             image:: images/Levels/Level3Screenshot.png
    :width: 8.35in
.. |AddLevel2|                    image:: images/Levels/AddLevel2.png
.. |AddGameLogic|                 image:: images/Levels/AddGameLogic.png
.. |RenameLevelCopied|            image:: images/Levels/RenameLevelCopied.png
.. |Level2Screenshot|             image:: images/Levels/Level2Screenshot.png
    :width: 8.35in
.. |DuplicateLevel|               image:: images/Levels/DuplicateLevel.png
.. |RenameLevel1|                 image:: images/Levels/RenameLevel1.png
.. |RenamedLevel3|                image:: images/Levels/RenamedLevel3.png
.. |SameProperties|               image:: images/Levels/SameProperties.png

.. include:: BookFormattingShortcuts.rst