.. _LevelCheckpoints2014:

.. rst-class:: SearchTitle

Level Checkpoints
=================

.. rst-class:: SearchDescription

This lesson shows how to implement mid-level checkpoints. When a level resets, so does the player data, so the last checkpoint needs to be stored in the LevelSettings object.

Create a New Project
--------------------

:ref:`CreateNewProject2014`

.. sidebar:: Using Past Scripts

 If you have already created the SweptController for the player in the previous lesson feel free to import it:

 * :ref:`Command<Commands2014>` : ``ShowProjectFolder`` or :menuselection:`Project --> Show Project Folder`

 * Locate and enter the project folder for the :ref:`UsingTheSweptController` lesson

 * Enter the Content folder    

 * Drag both SweptController.z and PlayerController.z into the Zero Editor
 
 *When going this route, don't forget to add Collider and RigidBody components to your player, as well as setting its Dynamic State to Kinematic.*
 
Level Setup
-----------

*   Create a object named 'Player' with :ref:`swept controls <UsingTheSweptController>`
*   Create a Level for the player

Forwarding Collision Events
---------------------------
We know how to make a Player with the swept controller, however one problem we get with the swept controller is it does not receive collision events, meaning the player doesn't know what it's colliding with.  To fix this, we need to Forward the swept collision events. We'll use a special script called CustomCollisionEventsTracker.

*   :ref:`Select the Player object <SelectObject2014>`

*   In Properties Window

    *   :ref:`Add a CustomCollisionEventTracker Component <AddComponent2014>`
    
    *   Under SweptController
        
        *   Set ForwardEvents to: true

Now all collision events handled by the SweptController will be forwarded to the Player object.

|pbr|

Checkpoints
-----------

We will distinguish checkpoints from other objects by the presence of a Checkpoint component. To do this will create an empty Zilchscript named Checkpoint.

*   :ref:`Add a new ZilchScript resource<ResourceAdding2014>` named: 'Checkpoint'

|pbr|

**Checkpoint1 Object**

*   :ref:`Command<Commands2014>`: ``CreateSprite`` or :menuselection:`Create --> Create Sprite`
*   In Properties Window
    
    *   Set Name to: 'Checkpoint1'
    
    *   :ref:`Add a BoxCollider Component <AddComponent2014>`
    
    *   :ref:`Add a Checkpoint Component <AddComponent2014>`
    
    *   Under Transform
        
        *   Set the Scale to:[1, 1000, 1]
        
    *   Under Sprite
        
        *   Set the Color(R, G, B, A) to: Translucent White[255, 255, 255, 0.1]
    
    *   Under BoxCollider
    
        *   Set Ghost to: true
        
**Checkpoint2 Object**

*   Copy and Paste Checkpoint1
*   In Properties Window
    
    *   Set Name to: 'Checkpoint2'
    
*   In the Tools Window

    * Select the TranslateGizmo
    * Move Checkpoint2 to the right
    
    
        
We want to make the checkpoint height infinitely tall because it's a boundary.  To simulate this, we just scale along the y axis so much so that the user can't tell where it starts and ends.
        
|NoBookBegin| 
|CP2_CheckpointsWeb|
|NoBookEnd|

|NoWebBegin|
|CP2_CheckpointsBook|
|NoWebEnd|

Storing Player Data
-------------------

Now we will store the PlayerPosition in the level by making a Zilch Script

*   :ref:`Add a new ZilchScript resource<ResourceAdding2014>` named: 'LevelVars'

*   Include the following Property in the **LevelVars** Script

.. code-block:: as

    [Property]
    var PlayerPosition : Real3 = Real3();

*   :ref:`Select the LevelSettings object <SelectObject2014>`

*   In Properties Window

    *   :ref:`Add a LevelVars component <AddComponent2014>`
    
You can set the starting position of the player by changing PlayerPosition under the LevelVars component.  If you :ref:`run the game <RunTheGame2014>` now, however, you will notice the player position doesn't change as we have yet to use the variable.  We will fix that in a bit.

Resetting the Level
-------------------
Next let's make the level restart.

*   :ref:`Add a new ZilchScript resource<ResourceAdding2014>` named: 'RkeyReset'

*   Implement the following logic update in the **RkeyReset** script

.. code-block:: as

    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        // Reset the player when R is pressed
        if(Zero.Keyboard.KeyIsPressed(Keys.R))
        {
            var player = this.Space.FindObjectByName("Player");
            
            if(player != null)
            {
                player.Transform.Translation = this.Owner.LevelVars.PlayerPosition;
            }
        }
    }

|pbr|    

*   :ref:`Add a LevelVars component <AddComponent2014>`
*   In Properties Window

    *   :ref:`Add a RkeyReset Component <AddComponent2014>`
    
*   :ref:`Save your project <SavingProject2014>` and :ref:`run the game <RunTheGame2014>`    

Now you'll notice pressing ``R`` sets your player's position. 
    
*   :ref:`Stop the Game <StopGame2014>`
    
Saving the Last Checkpoint in the Level
---------------------------------------

Finally, we need to store the player's last checkpoint position in the LevelSettings object.

*   In the **PlayerController**

    *   Add the following to the **Initialize** function
    
    .. code-block:: as
    
        Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted);
        
        var startPosition = this.Space.LevelSettings.LevelVars.PlayerPosition;
        
        this.Owner.Transform.Translation = startPosition;
        
    *   Create the following function to connect to the Collision Started Event:
    
    .. code-block:: as
    
        function OnCollisionStarted(event : CollisionEvent)
        {
            //when hitting a checkpoint, save this position in the level
            if(event.OtherObject.Checkpoint != null)
            {
                var checkpointPosition = event.OtherObject.Transform.Translation;
                
                checkpointPosition.Y = this.Owner.Transform.Translation.Y;
                
                this.Space.LevelSettings.LevelVars.PlayerPosition = checkpointPosition;
            }
        }
        
*   :ref:`Run the project <RunTheGame2014>`

*   Press the ``R`` key to reset the level and see your checkpoints in action.

Now we have a simple checkpoint system.

.. |CP2_CheckpointsWeb| image:: images/platformer/CP2_1.png
  :width: 8.35in

.. |CP2_CheckpointsBook| image:: images/platformer/CP2_1.png
    :height: 3.0in
  
.. include:: BookFormattingShortcuts.rst