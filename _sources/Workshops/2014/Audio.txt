.. _Audio2014:

.. rst-class:: SearchTitle

Audio
=====

.. rst-class:: SearchDescription

This lesson covers importing sound files, playing music and sound effects, persistent objects that are not destroyed in-between level loading/changing, and positional sound.

Create a New Project
--------------------

:ref:`CreateNewProject2014`

Level Setup
-----------

* :ref:`Command<Commands2014>`: ``CreateSprite`` or :menuselection:`Create --> Create Sprite` 
* In the Properties Window

  * :ref:`Add a RigidBody Component <AddComponent2014>`
  * Under Transform

    * Set Translation to: [5, 0, 0]
  * Under Sprite

    * Set SpriteSource to: Circle

* :ref:`Command<Commands2014>`: ``CreateSprite`` or :menuselection:`Create --> Create Sprite` 
* In the Properties Window

  * Set Name to: BackgroundMusic

Sound Emitters
--------------

* :ref:`Add a SoundEmitter component <AddComponent2014>` to the BackgroundMusic object

  |BackgroundMusic|

The SoundEmitter component emits sound at its location. It gives you the option of choosing whether or not to apply the positional effects to the sound. 

|pbr|

Here is how the level should look after our initial setup:

|InitialSetup|

* :ref:`Save the project <SavingProject2014>` and :ref:`run the game <RunTheGame2014>`


The Circle sprite should fall because it has a RigidBody being affected by gravity.

* :ref:`Stop the Game <StopGame2014>`
* :ref:`Select the BackgroundMusic object <SelectObject2014>`
* In the Properties Window

  * Under SoundEmitter

    * Set StartPlaying to: True
* :ref:`Save the project <SavingProject2014>` and :ref:`run the game <RunTheGame2014>`


The DefaultSound that comes with the Zero Engine should play as soon as the level starts. 

Volume
++++++

The SoundEmitter has a Volume property that allows you to choose the percentage of the sound's volume that should be used when the sound is played. In other words, if the SoundEmitter's Volume is 1.0, then 100% of what the actual sound file's volume is will be used, and if it's 0.5 then 50% of what the actual sound file's volume is will be used when the sound is played.

* :ref:`Stop the Game <StopGame2014>`
* In the Properties Window

  * Under SoundEmitter

    * Set Volume to: 0.25

* :ref:`Save the project <SavingProject2014>` and :ref:`run the game <RunTheGame2014>`

The DefaultSound is now played by the SoundEmitter at Â¼ or 25% of the actual volume of the DefaultSound.

|pbr|

Pitch
+++++

* :ref:`Stop the Game <StopGame2014>`
* In the Properties Window

  * Under SoundEmitter

    * Set Volume to: 1.0
    * Set Pitch to: 4.0


The pitch is how high or low it will sound when you hear it. This is not the same as volume. Pitch is related to the frequency of the sound. A higher frequency means a higher pitch.

* :ref:`Save the project <SavingProject2014>` and :ref:`run the game <RunTheGame2014>`

Notice the effects of the higher pitch.

* :ref:`Stop the Game <StopGame2014>`
* In the Properties Window

  * Under SoundEmitter

    * Set Pitch to: 0.5
* :ref:`Save the project <SavingProject2014>` and :ref:`run the game <RunTheGame2014>`


Notice the effects of the lower pitch. The **SoundCue** known as the DefaultCue is currently being used. Now we will create our own SoundCue so that we can do more.

* :ref:`Stop the Game <StopGame2014>`

Adding a SoundCue Resource
--------------------------

:ref:`Add a new SoundCue resource<ResourceAdding2014>` named: 'Music1' 

    |AddSoundCue|

|pbr|

Our new SoundCue is displayed in the Properties Window:

|SoundCueProperties|

There is currently no Sound added to the Music1 SoundCue that we just created.

* In the Properties Window

  * Under Sounds

    * Click the Add SoundEntry... area

The DefaultSound is now added to the Music1 SoundCue. Not only do we have our own version of the DefaultCue, but we now have access to more properties to specify how the sound will be played.

* :ref:`Select the BackgroundMusic object <SelectObject2014>`
* In the Properties Window

  * Under SoundEmitter

    * Set Cue to: Music1

      |NoBookBegin| |SetCueToMusic1Web| |NoBookEnd|
            
            |NoWebBegin| |SetCueToMusic1Book| |NoWebEnd|

      * Click on the |RightArrow| right of Music1
* In the Properties Window

  * Set PlayMode to: Looping

    |Looping|

* :ref:`Save the project <SavingProject2014>` and :ref:`run the game <RunTheGame2014>`

The sound is now looping so it gets played repeatedly as soon as it finishes.

* :ref:`Stop the Game <StopGame2014>`

Adding a Sound Resource
-----------------------

|NoBookBegin|

* :download:`Download the Sounds for this lesson <files/Sounds>`

|NoBookEnd|

:ref:`Import the provided Sound resource<ResourceAdding2014>` named: Music1.wav

|OpenSoundResource|

The new Sound is added to the Library Window under the Sound tag.

|NewSoundInLib|

The Sound resource is not the same as the SoundCue resource. The Sound resource refers to the sound file, while the SoundCue refers to the presets that determine *how* a sound file is played.

* In the Library Window

  * Under the SoundCue tag
    
    * Select the Music1 SoundCue

|pbr|

* In the Properties Window

  * Under Sounds

    * Under Sound: DefaultSound

      * Set Sound to: Music1

        |SettingSoundOnSoundCue|
 
* :ref:`Save the project <SavingProject2014>` and :ref:`run the game <RunTheGame2014>`

The Music1 Sound we just added to the project is now being played instead of the DefaultSound. We now have background music.

* :ref:`Stop the Game <StopGame2014>`

|pbr|

Importing Multiple Sound Files with Drag and Drop
-------------------------------------------------

* Make sure the Level Window is visible
* Drag and Drop the following files from the same folder where Music1 was located (not in the editor but from your computer) onto the Level Window:

  * Music2.wav
  * CoinPickup.wav
  * ScoreV2.wav

The following window should appear:

|GroupImport|

This convenient feature allows us to specify import options for the group of files. There is an option that allows us to tell the Zero Engine to create a Cue for each Sound file automatically.

* In the Group Import Options Window

  * Under AudioOptions

    * Set GenerateCue to: PerSound

      |PerSound|

    * Click the Import All button

The Sound files have been imported and each has a corresponding SoundCue.

* :ref:`Save the project <SavingProject2014>`

|pbr|

Pausing Sound in Code
---------------------

:ref:`Add a new ZilchScript resource<ResourceAdding2014>` named: 'GameLogic' 

* Update the **GameLogic** script with the following code:

.. code-block:: as

    class GameLogic : ZilchComponent
    {
        function Initialize(init : CogInitializer)
        {
            // Receive LogicUpdate events:
            Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        }

        function OnLogicUpdate(event : UpdateEvent)
        {
            // Pause/Resume all sounds in the space:
            if (Zero.Keyboard.KeyIsPressed(Keys.Space))
            {
                this.Space.SoundSpace.Pause = !this.Space.SoundSpace.Pause;
            }
        }
    }


The Space has SoundSpace component attached to it that provides sound for the Space.

|SoundSpaceComponent|

The SoundSpace component allows us to set the pitch scale and volume for all sounds in the Space. We are also able to pause/resume all sounds playing in the Space by setting the **SoundSpace.Pause** bool to True or False.

* In the Objects Window
    
  * :ref:`Select the LevelSettings object <SelectObject2014>`
* In the Properties Window

  * :ref:`Add the GameLogic component <AddComponent2014>`
* :ref:`Save the project <SavingProject2014>` and :ref:`run the game <RunTheGame2014>`

Pressing the ``Space-bar`` key on the keyboard allows us to pause/resume all sounds playing in the Space. Notice how the music resumes right where it left off. Keep in mind that this only affects sound.

* :ref:`Stop the Game <StopGame2014>`
* Open the GameLogic script
* Add the following code to the **OnLogicUpdate** method:

.. code-block:: as
    :emphasize-lines: 8-12

    function OnLogicUpdate(event : UpdateEvent)
    {
        // Pause/Resume all sounds in the space:
        if (Zero.Keyboard.KeyIsPressed(Keys.Space))
        {
            this.Space.SoundSpace.Pause = !this.Space.SoundSpace.Pause;
        }
        // Restart the level
        if (Zero.Keyboard.KeyIsPressed(Keys.R))
        {
            this.Space.ReloadLevel();
        }        
        
    }

* :ref:`Save the project <SavingProject2014>` and :ref:`run the game <RunTheGame2014>`

Now the music plays, and the level is reloaded when we press the ``R`` key on the keyboard. Notice how the music restarts every time we reload the level. What if we wanted the music to continue playing throughout multiple levels and when the level is reloaded?

* :ref:`Stop the Game <StopGame2014>`

Continue Playing Sounds In-Between Levels
-----------------------------------------

* Open the **GameLogic** script
* Replace the **Initialize** method with the following code:

.. code-block:: as
    :emphasize-lines: 1,11-17

    var BackgroundMusicObject : Cog = null;

    function Initialize(init : CogInitializer)
    {
        // Receive LogicUpdate events:
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        
        this.BackgroundMusicObject = this.Space.FindObjectByName("BackgroundMusic");
        // If the there is background music
        if(this.BackgroundMusicObject != null)
        {
            // Make it persist
            this.BackgroundMusicObject.Persistent = true;
        }
    }

In this code we are setting the Cog's **Persistent** member on the BackgroundMusic object to True. This prevents the object from being destroyed when a level is loaded/reloaded. After calling this function, we will have to manually set the Persistent Cog member to False later on in order to allow it to be destroyed as it normally would be.

* :ref:`Save the project <SavingProject2014>` and :ref:`run the game <RunTheGame2014>`

Pressing the ``R`` key on the keyboard will reload the level and the music will continue playing because the BackgroundMusic object was never destroyed,
but observe what happens when the ``R`` key is repeatedly pressed. The music is still
playing, and there are multiple
instances of the music playing at the same time. This is because the Background object is still being created every time the level is loaded.

* :ref:`Stop the Game <StopGame2014>`
* :ref:`Select the BackgroundMusic object <SelectObject2014>`
* In the Properties Window

  * Set Archetype to: BackgroundMusic
    
      |SetArchetype|

  * Under SoundEmitter

    * Set StartPlaying to: False

We will play the sound manually from in code.
  
    * Set Positional to: False

We don't need positional sound because it's background music.

  * Upload the archetype by clicking the |upload| button

The BackgroundMusic archetype should appear under the Archetype tag in the Library Window.

|ArchetypeMade|

* :ref:`Save the project <SavingProject2014>`
* ``Right-Click`` on the BackgroundMusic object in the Objects Window

  * Select the Delete option

    |DeletingObj|


We will create the BackgroundMusic object in code by using the BackgroundMusic archetype. This gives us the ability to not create it if it already exists in the level.

* Open the **GameLogic** script

|pbr|

* Replace the **Initialize** method with the following code:

.. code-block:: as
    :emphasize-lines: 6-14

    function Initialize(init : CogInitializer)
    {
        // Receive LogicUpdate events:
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        
        this.BackgroundMusicObject = this.Space.FindObjectByName("BackgroundMusic");
        // If the there is no background music
        if(this.BackgroundMusicObject == null)
        {
            // Make some and
            this.BackgroundMusicObject = this.Space.Create(Archetype.Find("BackgroundMusic"));
            // Make it persist
            this.BackgroundMusicObject.Persistent = true;
        }
        // If we are not yet playing the music
        if (this.BackgroundMusicObject.SoundEmitter.IsPlaying() == false)
        {
            // Get the music playing
            this.BackgroundMusicObject.SoundEmitter.Play();
        }
        
    }

.. sidebar:: Don't want to see the Archetype get created?

      * In the Library Window
      
        * Under the Archetype tag
        
          * Select the BackgroundMusic Archetype
      * In the Properties Window
      
        * Under Sprite
        
          * Set Visible to: False
          
      **or** 
      
        * Remove the Sprite component altogether!
    
We search for the BackgroundMusic object, and if it wasn't found, then we create it from the archetype. After that, the BackgroundMusic object should exist, so we manually play the current SoundCue on the SoundEmitter, but we only play it if it is not already playing.

* :ref:`Save the project <SavingProject2014>` and :ref:`run the game <RunTheGame2014>`

The music plays because the BackgroundMusic object is created by the GameLogic script. Pressing the ``R`` key on the keyboard will reload the level, but the music continues playing.

Playing Different SoundCues from a Sound Emitter in Code
--------------------------------------------------------

The SoundEmitter component has a member function called **PlayCue** that accepts the SoundCue resource that you wish to play. We can also stop a sound that is playing by using the SoundEmitter's **Stop** member function.

* :ref:`Stop the Game <StopGame2014>`
* Open the **GameLogic** script
* Add the following code to the **OnLogicUpdate** method:

.. code-block:: as
    :emphasize-lines: 14-21
    
    function OnLogicUpdate(event : UpdateEvent)
    {
        // Pause/Resume all sounds in the space:
        if (Zero.Keyboard.KeyIsPressed(Keys.Space))
        {
            this.Space.SoundSpace.Pause = !this.Space.SoundSpace.Pause;
        }
        // Restart the level
        if (Zero.Keyboard.KeyIsPressed(Keys.R))
        {
            this.Space.ReloadLevel();
        }     
        
        // Change background music
        if (Zero.Keyboard.KeyIsPressed(Keys.Right))
        {
            // Stop the Current Music
            this.BackgroundMusicObject.SoundEmitter.Stop();
            // Play Music2
            this.BackgroundMusicObject.SoundEmitter.PlayCue(SoundCue.Find("Music2"));
        }       
        
    }

This code stops the current SoundCue on the SoundEmitter and Plays the Music2 SoundCue from the BackgroundMusic object's SoundEmitter.

* :ref:`Save the project <SavingProject2014>` and :ref:`run the game <RunTheGame2014>`

Now if the ``Right`` arrow key is pressed on the keyboard, the Music1 SoundCue stops the Music1 Sound and the Music2 SoundCue plays the Music2 Sound from the BackgroundMusic object's SoundEmitter. 

* :ref:`Stop the Game <StopGame2014>`

Playing Sound Effects
---------------------

So far, we have been playing music from the SoundEmitter component. Now we will go over playing sound effects and positional sound effects.

* :ref:`Stop the Game <StopGame2014>`
* Open the **GameLogic** script
* Add the following code to the **OnLogicUpdate** method:

.. code-block:: as

        if (Zero.Keyboard.KeyIsPressed(Keys.Up))
        {
            this.Space.SoundSpace.PlayCue(SoundCue.Find("CoinPickup"));
        }
        if (Zero.Keyboard.KeyIsPressed(Keys.Down))
        {
            this.Space.SoundSpace.PlayCue(SoundCue.Find("ScoreV2"));
        }    

This code uses the SoundSpace's **PlayCue** member function to play SoundCues.

* :ref:`Save the project <SavingProject2014>` and :ref:`run the game <RunTheGame2014>`

The CoinPickup Sound plays when the ``Up`` arrow key is pressed and the ScoreV2 Sound plays when the ``Down`` arrow key is pressed. An object with a SoundEmitter component could do the same thing. In addition to that, the object with some position in the world could play the Sounds with positional properties that take the distance into account so that sound far away sounds aren't as loud as sounds that are closer.

Microphones
-----------

Positional sounds require a Microphone component to be attached to an object located somewhere in the level in order to be heard. This mimics a person (such as the player) not being able to hear a sound from location that is very far from his or her location in the level. If there are no objects with microphone components in the level, then there will be an internal microphone used that is located at the origin (the [0,0,0] position). If we had a Player object and we wanted the player to hear sounds with distance taken into account as a person would in real-life, we would simply give that object a Microphone component.

* :ref:`Command<Commands2014>`: ``CreateSprite`` or :menuselection:`Create --> Create Sprite` 
* In the Properties Window

  * Set Name to: Player
  * Under Transform

    * Set Translation to: [0,-50,0]
  * Under Sprite

    * Set Color to: [R: 255, G: 0, B: 128]
  * :ref:`Add a Microphone component <AddComponent2014>`

    |Player|
    
* In the Objects Window 
    
  * :ref:`Select the Sprite <SelectObject2014>`

|pbr|
    
* In the Properties Window
    
  * :ref:`Add a SoundEmitter Component <AddComponent2014>`
  * Under SoundEmitter
      
    * Set StartPlaying to: True
    * Click on the |RightArrow| right of DefaultCue
* In the Properties Window
  
  * Set PlayMode to: Looping

* :ref:`Select the Camera from the Object Window <SelectObject2014>`

  * Under Camera

    * Set Size to: 101

Here is what the Level looks like:

|DroppingSound|

* :ref:`Save the project <SavingProject2014>` and :ref:`run the game <RunTheGame2014>`

Because the Player object has the Microphone component and its position is [0,-50, 0], the looping music gets loudest when the sprite it is attached to gets closest to the player. The pitch change is from the Doppler effect.

Now we know how to import sound files, play music and sound effects, play music in-between levels, pause music, and use positional sounds.

.. |RightArrow|             image:: images/Audio/RightArrow.png
.. |Looping|                image:: images/Audio/Looping.png
.. |NewSoundInLib|          image:: images/Audio/NewSoundInLib.png
.. |ArchetypeMade|          image:: images/Audio/ArchetypeMade.png
.. |DeletingObj|            image:: images/Audio/DeletingObj.png
.. |SetCueToMusic1Web|      image:: images/Audio/SetCueToMusic1.png
.. |SetCueToMusic1Book|     image:: images/Audio/SetCueToMusic1.png
    :height: 2.0in
.. |PerSound|               image:: images/Audio/PerSound.png
.. |BackgroundMusic|        image:: images/Audio/BackgroundMusic.png
.. |SoundCueProperties|     image:: images/Audio/SoundCueProperties.png
.. |DroppingSound|          image:: images/Audio/DroppingSound.png
    :width: 8.35in
.. |OpenSoundResource|      image:: images/Audio/OpenSoundResource.png
    :width: 8.35in
.. |upload|                 image:: images/Audio/upload.png
.. |SetArchetype|           image:: images/Audio/SetArchetype.png
.. |InitialSetup|           image:: images/Audio/InitialSetup.png
.. |AddSoundCue|            image:: images/Audio/AddSoundCue.png
.. |SoundSpaceComponent|    image:: images/Audio/SoundSpaceComponent.png
.. |SettingSoundOnSoundCue| image:: images/Audio/SettingSoundOnSoundCue.png
.. |GroupImport|            image:: images/Audio/GroupImport.png
.. |Player|                 image:: images/Audio/Player.png

.. include:: BookFormattingShortcuts.rst