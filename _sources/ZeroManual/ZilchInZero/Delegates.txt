.. _ZilchDelegates:

.. rst-class:: SearchTitle

Delegates
=========

.. rst-class:: SearchDescription

Delegates allows you to hold function pointer in a variable, and use them at a later time.
  
.. code-block:: as

    class DelegateHolder
    {
        var Name:String = "Unnamed";
        var Greeting: delegate() = null;
        
        constructor(name: String)
        {
            this.Name = name;
        }
        
        function Introduce()
        {
            Console.WriteLine("Hi I'm `this.Name`");
        }
        
    }  
    
    class Driver
    {
        function DelegateSamples()
        {
            var gh = new DelegateHolder("gh");
            var ef = new DelegateHolder("ef");
            
            // Making a delegate:
            var getName : delegate() = gh.Introduce;  
            
            // Using a delegate:
            getName();                                // Hi I'm gh
            
            // Assigning a member function to a delegate:
            getName = ef.Introduce; 
            
            // Passing a delegate into a function:            
            Driver.DelegateCaller(getName);           // Hi I'm ef
            getName();                                // Hi I'm ef
            
            // Assigning a static function to a delegate:
            getName = Driver.DelegateTest;        
            getName();                                // 256
                                                      
            Driver.DelegateCaller(getName);           // 256
                                                      
            // Making a delegate:                                          
            var doMath : delegate(a: Integer, b: Integer): Integer = Driver.Add;
            
            Console.WriteLine(Driver.BinaryIntOpsCaller(doMath)); // 8
            Console.WriteLine(doMath(2,6));                       // 8
            
            doMath = Driver.Multiply;
            Console.WriteLine(Driver.BinaryIntOpsCaller(doMath)); // 15
            Console.WriteLine(doMath(2,6));                       // 12
            
            doMath = Driver.Subtract;
            Console.WriteLine(Driver.BinaryIntOpsCaller(doMath)); // 2
            Console.WriteLine(doMath(2,6));                       // -4
        }
        
        [Static]
        function Add(a: Integer, b: Integer): Integer
        {
            return a+b;
        }
        [Static]
        function Multiply(a: Integer, b: Integer): Integer
        {
            return a*b;
        }
        [Static]
        function Subtract(a: Integer, b: Integer): Integer
        {
            return a-b;
        }
        [Static]
        function BinaryIntOpsCaller(a: delegate(a: Integer, b: Integer):Integer):Integer
        {
            return a(5, 3);
        }
        [Static]
        function DelegateCaller(a: delegate())
        {
            a();
        }
    }

Console Output::

      ---------------- Begin Game ---------------
      Hi I'm gh
      Hi I'm ef
      Hi I'm ef
      256
      256
      8
      8
      15
      12
      2
      -4    
    
.. Warning::

   At this time the names chosen for the parameters are part of the signature. In order for two function signatures to be the same the names chosen for the parameters must match:
   
   .. code-block:: c#
      
      class MyMathLib
      {
         [Static] // Note named parameters are lhs and rhs:
         function Exponent(lhs: Integer, rhs: Integer): Integer
         {
             return lhs^rhs;
         }
      }
      
   Consider these tests:
      

   .. code-block:: c#
   
     class Driver
      {
         function DelegateTest()
         {
            // Here the delegate has named parameters a and b:
            var doMath : delegate(a: Integer, b: Integer): Integer = MyMathLib.Exponent;// This won't compile.
         }
      }
      
   Console Output::
        
        The value being assigned to 'doMath' must be of type 'delegate (a : Integer, b : Integer) : Integer'. 
        Its type is 'delegate (lhs : Integer, rhs : Integer) : Integer'.
        
   .. code-block:: c#
   
     class Driver
      {
         function DelegateTest()
         {
            // When declaring a delegate you cannot exclude the parameter names:
            var doMath : delegate(Integer, Integer): Integer = MyMathLib.Exponent;// This won't compile.
         }
      }   
     
   Console Output::
        
        Function declaration 'delegate' has an invalid argument list. We found 'UpperIdentifier' but 
        we expected to find ')'.   

   .. code-block:: c#
   
     class Driver
      {
         function DelegateTest()
         {
            // Here, after making the parameter names match, does it work:
            var doMath : delegate(lhs: Integer, rhs: Integer): Integer = MyMathLib.Exponent;
            Console.WriteLine(doMath(2,8));
         }
      }          
            
   .. tab::
    
    .. tabindex:: Console Output
    
      ::
        
        ---------------- Begin Game ---------------
        256
    
    
.. Warning::
 
   Delegates that point at member functions can create memory leaks if they make cycles. See :doc:`Memory_Management` for more.
    

.. Warning::
 
  Delegates pointing to member functions will throw runtime errors if the instance it was bound with was destroyed:

  .. code-block:: as

    // Here are three Objects with the ability to hold delegates:
    var ab = new DelegateHolder("ab");
    var b = new DelegateHolder("b");
    
    ab.Greeting = b.Introduce;
    
    delete b;
    ab.Greeting(); // This throws a runtime error
    
  Console Output::
        
        Attempted to access a member of a null handle: Attempted to call a member function on a null object
    
.. Warning::
 
  It is an illegal operation to call a null delegate, so be sure to initialize your delegates before calling!

  .. code-block:: as

    // Here are three Objects with the ability to hold delegates:
    var ab: delegate(a: Integer, b: Integer): Integer  = null;
  
    ab(3, 6);// This throws a runtime error
    
  Console Output::
        
        Attempted to invoke a null delegate
    
    
    
    
    
    
    
    
    