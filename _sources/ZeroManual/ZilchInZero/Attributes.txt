.. _ZilchAttributes:

.. rst-class:: SearchTitle

Attributes
==========

.. rst-class:: SearchDescription

Attributes are part of the Zilch grammar allowing additional information to be associated with other Zilch constructs, i.e. they may be applied to classes, fields, get-sets, and functions. While some attributes are inherent to the Zilch programming language, the program embedding Zilch may create and assign their own meaning to new attributes as appropriate for their scripting needs. This means that some attributes exist in Zilch, the standalone language, while others are available in Zilch due to the extensions made by the Zero Engine in which it is embedded. 

Common Uses
-----------

    From attributes provided by the Zero Engine:
    
    *   Creating a Property on a component
    *   Marking a component dependent on another component
    *   Custom Tool creation
    *   Custom Command creation
    
    From attributes built into Zilch:
    
    *   Creation of static helper classes
    *   Enabling Polymorphic behaviors
    *   Extending the interface of preexisting classes

Using Attributes
----------------    
    
In Zilch, attributes can be assigned by annotating the affected construct with a capitalized name of the recognized attribute in square brackets above the definition:

.. code-block:: csharp
    
    [Virtual] // Here we've added the attribute "Virtual" to the function Speak
    function Speak() : String
    {
      return "...";
    }
    
Existing Attributes
~~~~~~~~~~~~~~~~~~~
    
The following are usable in the Zero Engine:

.. _ZilchAttributesTable:

+-----------------------------------------------------------------+-------+-------------------------------------------------------------+
| Attribute                                                       | From  | High Concept                                                |
+=================================================================+=======+=============================================================+
| :ref:`[Static]<ManualAttributeStatic>`                          | Zilch | Makes construct static                                      |
+-----------------------------------------------------------------+-------+-------------------------------------------------------------+
| :ref:`[Virtual]<ManualAttributeVirtual>`                        | Zilch | Marks a construct as a polymorphic base                     |
+-----------------------------------------------------------------+-------+-------------------------------------------------------------+
| :ref:`[Override]<ManualAttributeOverride>`                      | Zilch | Marks a construct as overriding a base construct            |
+-----------------------------------------------------------------+-------+-------------------------------------------------------------+
| :ref:`[Extension(typeid(OtherType))]<ManualAttributeExtension>` | Zilch | Appends construct to preexisting ``OtherType``              |
+-----------------------------------------------------------------+-------+-------------------------------------------------------------+
| :ref:`[Editable]<ManualAttributeEditable>`                      | Zero  | Allows construct to appear in Property Grid                 |
+-----------------------------------------------------------------+-------+-------------------------------------------------------------+
| :ref:`[Serialized]<ManualAttributeSerialized>`                  | Zero  | Allows construct value to be saved by Zero                  |
+-----------------------------------------------------------------+-------+-------------------------------------------------------------+
| :ref:`[Property]<ManualAttributeProperty>`                      | Zero  | Combines ``[Editable]`` and ``[Serialized]``                |
+-----------------------------------------------------------------+-------+-------------------------------------------------------------+
| :ref:`[Dependency]<ManualAttributeDependency>`                  | Zero  | Enables Zero to enforce explicit dependencies               |
+-----------------------------------------------------------------+-------+-------------------------------------------------------------+
| :ref:`[RunInEditor]<ManualAttributeRunInEditor>`                | Zero  | Allows code to run in the editor                            |
+-----------------------------------------------------------------+-------+-------------------------------------------------------------+
| :ref:`[Tool]<ManualAttributeTool>`                              | Zero  | Can run in editor and accessible in Tools Window            |
+-----------------------------------------------------------------+-------+-------------------------------------------------------------+
| :ref:`[Command]<ManualAttributeCommand>`                        | Zero  | Can run in editor and accessible in Search Window           |
+-----------------------------------------------------------------+-------+-------------------------------------------------------------+

.. _ManualAttributeStatic:

[Static]
++++++++
        
        Static can be used on function, fields, and get-sets. These allow you to access fields, get-sets, and functions without first creating an instance of the class in your code. 
        
        .. code-block:: csharp
            
            class Mathematics
            {
                [Static]
                var PI: Real{ get{return 3.14159292;}}
                [Static]
                function Circumference(radius : Real) : Real
                {
                    return Mathematics.PI * radius * radius;
                }
            }
            
        Given the class above you can use its functionality by calling into the class's namespace, e.g.
        
        .. code-block:: csharp
        
            var myNewFavoriteNumber = Mathematics.PI + Mathematics.Circumference(2.0);
                    
.. sidebar:: Virtual and Override
        
        While these attributes enable polymorphism, they are still in their infancy. Virtual is to be used with the base class field/get-set/function, while Override is for all the derived classes seeking to write over the base class's field/get-set/function. 
        
        That said, mixing up ``[Virtual]`` and ``[Override]`` , or forgetting the use of the ``[Override]`` may still provide desired results. To promote forward compatibility, we highly encourage the correct, indicated usage. 


|

:ref:`back to table<ZilchAttributesTable>`

.. _ManualAttributeVirtual:

[Virtual]
+++++++++
        
        Virtual is used to give Base classes the ability to determine some functions as being able to be overridden by its derived classes.

        |br|

:ref:`back to table<ZilchAttributesTable>`        
        
.. _ManualAttributeOverride:
        
[Override]
++++++++++
        
        Override is used by a derived class to mark the intentional overriding of a base class's virtual function. 

        |br|
        
:ref:`back to table<ZilchAttributesTable>`        

.. _ManualAttributeExtension:
        
[Extension(typeid(OtherType))]
++++++++++++++++++++++++++++++
    
        This allow you to add functionality to a preexisting class from inside another. Currently you can only extend a class by adding get-sets and functions (i.e. you cannot add fields). 
|
|
|


Zero works with Zilch to offer these additional attributes:

:ref:`back to table<ZilchAttributesTable>`

.. _ManualAttributeEditable:

[Editable]
++++++++++
        
        Allows you to set a field or get-set via the Property Grid in the editor. Because this doesn't save the settings, it is usually used in conjunction with either ``[RunInEditor]`` or ``[Serialized]`` .
    
        |br|
        
:ref:`back to table<ZilchAttributesTable>`        
        
.. _ManualAttributeSerialized:
        
[Serialized]
++++++++++++
    
        Allows a value to be saved by the Engine. This allows a field and get-sets to be saved with ObjectStore. When used with ``[Editable]`` it allows the values to be saved from the Property Grid so that they may be loaded in an instance of the game. 
        
        |br|
        
:ref:`back to table<ZilchAttributesTable>`        
        
.. _ManualAttributeProperty:

[Property]
++++++++++
        
        Property wraps the ``[Editable]`` and ``[Serialized]`` attributes together into one. As implied by the use of ``[Editable]`` and ``[Serialized]``, it works on fields and get-sets.
        
        |br|
        
:ref:`back to table<ZilchAttributesTable>`        
        
.. _ManualAttributeDependency:

[Dependency]
++++++++++++
    
        Allows the programmer to make a dependency between components explicit. This allows users to determine the interrelatedness without having intimate knowledge of a component's inner workings. The Zero Engine supports this by requiring dependencies to be added prior to attaching the component, preventing the removal of dependencies while the component is still attached, and safeguarding the order of initialization of components such that the dependencies will always be initialized first. 
        
        The below sample demonstrates the declaration of a dependence upon another component:
        
        .. code-block:: as
            
            class SimpleOffset : ZilchComponent
            {
                // Declaring that SimpleOffset depends upon Transform component.
                [Dependency]
                var Transform : Transform = null; 
                function Initialize(init : CogInitializer)
                {
                    // This declaration also physically adds that variable to our fields: 
                    // Since this.Transform contains the component we have a dependency 
                    // on, we can access it without going through the Owner. 
                    this.Transform.Translation += Real3(0,5,0);
                }
            }

        The ``[Dependency]`` attribute may also be used on get-sets. 
        
        |br| 
        
.. sidebar:: Did you know?
    
    When working in the editor, the space the objects operate in is paused. This means that the ``LogicUpdate`` event will never fire, and that Actions on objects never get updated! In order to receive continuous events, the object should connect to ``UpdateFrame`` instead.        

:ref:`back to table<ZilchAttributesTable>`
    
.. _ManualAttributeRunInEditor:
        
[RunInEditor]
+++++++++++++
        
        When placed on a class derived from ZilchComponent, it changes proxy objects into live objects upon being attached in the editor. This means that the object will run its code in the editor. When `any` scripting file is saved in the editor, all live objects (i.e. those with the RunInEditor component attached) will, by default, have their object destroyed, recreated, and its data reinitialized. 
        
        |br| |br|
            
        .. Warning:: 
            
            Any code you choose to run via ``[RunInEditor]`` can affect the working of the editor. For instance, if you choose to loop through and destroy all the objects and save your game you may lose your ability to recover the lost objects, and have to recreate them by hand. Undo and Redo operations for RunInEditor components must be handled by the programmer!  
            
        |br|

:ref:`back to table<ZilchAttributesTable>`
        
.. _ManualAttributeTool:
        
[Tool]
++++++
        
        Allows for a tool to be hooked into the Tools Window such that it shows up in the drop down menu, and can be used in the editor. When creating a new custom tool, a good starting point is generating the ZilchScript with the Tool template chosen in the Add Window.
    
        |br|

:ref:`back to table<ZilchAttributesTable>`        
        
.. _ManualAttributeCommand:
        
[Command]
+++++++++
        
        Allows for a class to be hooked into the command system such that it shows up, and can be ran, from Zero's Search Window. When creating a new custom command, a good starting point is generating the ZilchScript with the Command template chosen in the Add Window.

:ref:`back to table<ZilchAttributesTable>`        
        
Parameters in Attributes
++++++++++++++++++++++++
        
Attributes can also take parameters; below is the template generated for creating a new Command by Zero:

.. code-block:: csharp
    
    [Command(autoRegister:true)] // This template file sets a parameter, autoRegister, to true.
    class MyNewCommand : ZilchComponent
    {
        function Initialize(init : CogInitializer)
        {
            Zero.Connect(this.Owner, Events.CommandExecute, this.OnCommandExecute);
        }

        function OnCommandExecute(event : CommandEvent)
        {
            Console.WriteLine("MyNewCommand Command Executed");
        }
    }
   
At this time, only Extension, Tool, and Command attributes take parameters. 

    *   Extension requires the type you are using to extend the attribute, as a parameter. 
    
    *   Tool and Command have the optional parameter to automatically register the component with the engine. 
        
        To manually register, you would add these components to an archetype and then add the Tool or Command editor tag via the Library Window, respectively. Registering manually gives you access to the archetype, making it possible to leverage component-based design in the construction of new Tools and Commands.

Related Materials
-----------------

Manual Pages
~~~~~~~~~~~~

    *   :ref:`Using Virtual and Override: Inheritance<ZilchInheritance>`
    *   :ref:`Using Static: Global Variables, in Variables and Data Types<ZilchVariablesAndDataTypesGlobalVariables>`
    *   :ref:`Using RunInEditor, Serialized, and Editable: The WYSIWYG Approach to Configurable Properties<ManualWYSIWYG>`
   
Lessons
~~~~~~~

    *   :ref:`Using Properties: Scripting 2<TutorialScripting2>`
    *   :ref:`Example using Dependency: Ray Casting<TutorialRayCasting>`

.. whenweareready::

    Community pages
    Explore
    <potentially other content in the future, such as links to Void content, Ask Questions, FogBugz cases, etc.>
    External to DP resources always last.
    Community
    
    
    Zero Q&A


    *   `Use of Virtual & Override`
    
        *   `Function Overriding <http://zero.digipen.edu/ask/192/function-overriding>`_
        *   `Support for Abstract and Virtual Classes in Zero <http://zero.digipen.edu/ask/971/support-for-abstract-and-virtual-classes-in-zero>`_
    
    *   `Using Static`
    
        `How Can I Call For A Local Variable From Another Function <http://zero.digipen.edu/ask/1056/how-can-i-call-for-a-local-variable-from-another-function>`_
    
    *   `Using Dependency`
    
        *`Add scripts that depend on each other to a gameobject.<http://zero.digipen.edu/ask/744/add-scripts-that-depend-on-each-other-to-a-gameobject>`_
        
    *   `Using Serialized`
    
        *   `Can you save data from a class?<http://zero.digipen.edu/ask/326/can-you-save-data-from-a-class>`_
        
    *   `Using Property`
    
        *   `Is it possible to create an array Property for CogPaths to be used in the component to link objects? <http://zero.digipen.edu/ask/225/possible-create-array-property-cogpaths-component-objects>`_
        *   `How do I serialize a class? How do I have a property array of it?<http://zero.digipen.edu/ask/833/how-do-i-serialize-a-class-how-do-i-have-a-property-array-of-it>`_
    
    
.. |br| raw:: html
    
    <br/>
                