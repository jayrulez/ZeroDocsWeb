.. _ManualHeightMapTool:

.. rst-class:: SearchTitle

HeightMapTool
=============

.. rst-class:: SearchDescription

The HeightMapTool is a tool used to create a :ref:`HeightMap<ManualHeightMap>` object and manipulate patches created on it. It has five sub-tools the user can use to create and destroy, raise and lower, smooth and sharpen, flatten, and paint patches on a HeightMap object.

.. _ManualHeightMapToolCommon

Common Uses
-----------

*   Creating large, three-dimensional environmental geometry

.. _ManualHeightMapToolUsing:

Using the HeightMapTool
-----------------------

There are two ways to access the HeightMapTool:

    *   Select ``HeightMapTool`` from the ``SelectTool`` drop-down list in the Tools Window

    *   Or, press '7', the hotkey for bringing up the HeightMapTool

When the HeightMapTool is opened and there is no previous :cpp:type:`HeightMap` object, a message will appear on the screen informing the user that there is no :cpp:type:`HeightMap` object, as can be seen here:

|NoHeightMapObject|

To make a new :ref:`HeightMap<ManualHeightMap>` object, simply click anywhere on the text that has appeared on the Level window. An object named ``HeightMap`` should now appear in the Objects Window.

Now that there is a :ref:`HeightMap<ManualHeightMap>` object, the user may start adding patches to it by using the CreateDestroy sub-tool of HeightMapTool. Patches are the segments of the HeightMap that can be altered through the HeightMapTool.

CreateDestroy
~~~~~~~~~~~~~

The CreateDestroy sub-tool is used to create and destroy patches that make up the height map. The size of the patch is created is dictated by the ``UnitsPerPatch`` property of the HeightMap object. Please see the :ref:`HeightMap Manual Page<ManualHeightMap>` for more information on this important property.

There are four properties in the CreateDestroyTool window that define certain parameters of the patches created:

*   ``BaseHeight`` : :cpp:type:`Real`

    *   A Real that defines the height at which the map will be created
    
*   ``UsePerlinNoise`` : :cpp:type:`Boolean`

    *   A boolean that when sets to true allows the user to create patches with different levels of noise, defined by the following two properties: ``PerlinFrequency`` and ``PerlinAmplitude``
    
*   ``PerlinFrequency`` : :cpp:type:`Real`

    *   A Real that defines the frequency of "bumps" to be added to the patch (e.g., a higher number makes for a bumpier patch)
    
*   ``PerlinAmplitude`` : :cpp:type:`Real`

    *   A Real that defines the height of the "bumps" created (e.g., a higher number makes for higher bumps)
    
To create a new patch, the user simply clicks wherever in the Level Window where they would like the patch to be placed. To destroy a patch, Shift+Click on the patch to be destroyed.
    
Here is a picture of four patches made with the default values of the properties of CreateDestroyTool:

|DefaultPatch|

Here is a picture where the upper-right patch has been made with ``PerlinFrequency`` set to 10 and ``PerlinAmplitude`` set to 12:

|BumpyPatch|

RaiseLower
~~~~~~~~~~

The RaiseLower sub-tool is used to increase and decrease points on the height map patches. There are four properties in the RaiseLowerTool window that define the range and strength of the area to be raised or lowered:

*   ``Radius`` : :cpp:type:`Real`

    *   A Real that defines the size of the area (in the shape of a circle) to be raised or lowered according to the value set in the property ``Strength``.
    
*   ``FeatherRadius`` : :cpp:type:`Real`

    *   A Real that defines a circle outside the one created by the Radius property, where the value of the property ``Strength`` linearly interpolates down from 100% (where it meets the inner circle) to 0% (at its own outer limit).
    
*   ``Strength`` : :cpp:type:`Real`

    *   A Real that defines the strength by which a part of the height map (see Radius and FeatherRadius) is raised or lowered.
    
*   ``Relative`` : :cpp:type:`Boolean`

    *   This property is not currently functional.
    
To raise an area on a patch of the height map, simply left-click on the area to be raised. One can either make multiple clicks or keep the left-mouse button held while moving the mouse around to continue to raise parts of the patch. To lower an area on a patch, hold Shift while clicking (or holding the left-mouse button).

The following animation shows part of a height map being raised using the RaiseLowerTool:

|RaiseHeightMap|

This animation shows the same part of the height map being lowered using the RaiseLowerTool:

|LowerHeightMap|

.. note::
   A number of sub-tools in the HeightMapTool have both the ``Radius`` and ``FeatherRadius`` properties. These two properties work together with the ``Strength`` property to determine the values by which the height map is being changed. While the descriptions of these properties in the property lists of the sub-tools is accurate, a diagram is provided to make clear how the value changes from the circle defined by ``Radius`` and the circle defined by ``FeatherRadius``:
   |RadiusFeatherRadius|

SmoothSharpen
~~~~~~~~~~~~~

The SmoothSharpen sub-tool is used to either smooth or sharpen bumps on the height map. There are seven properties in the SmoothSharpenTool window that define the range, strength, and sampling used to smooth and sharpen the map:

*   ``Radius`` : :cpp:type:`Real`

    *   A Real that defines the size of the area (in the shape of a circle) to be smoothed or sharpened according to the value set in the property ``Strength``.
    
*   ``FeatherRadius`` : :cpp:type:`Real`

    *   A Real that defines the area outside the area defined by ``Radius``, where the value of the property ``Strength`` linearly interpolates down from 100% (where it meets the inner circle) to 0% (at its own outer limit).
    
*   ``Strength`` : :cpp:type:`Real`

    *    A Real that defines the strength by which a part of the height map (see Radius and FeatherRadius) is smoothed or sharpened.

.. warning:: Deprecated Properties
   While the following properties will affect the behavior of the SmoothSharpen tool, it is highly recommended that the user leaves them at their default values as they will be removed in a later build.
    
   *   ``UniformSamples`` : :cpp:type:`Integer`

   *   ``RandomSamples`` : :cpp:type:`Integer`

   *   ``RandomSampleDistance`` : :cpp:type:`Integer`
       
   *   ``AutoDetermineSamples`` : :cpp:type:`Boolean` 

To smoothen an area on the height map, simply left-click on the area to be smoothed. One can either make multiple clicks or keep the left-mouse button held while moving the mouse around to continue smoothing parts of the patch. To sharpen an area on a patch, hold Shift while clicking (or holding the left-mouse button).

The following screenshot shows two patches; the one on the left has been smoothed, while the one on the right has been sharpened:

|SmoothedSharpenedPatches|

.. _ManualHeightMapUsingFlatten:

Flatten
~~~~~~~

The flatten sub-tool is used to to flatten an area of a patch to a certain height. By default, this height will be sampled on the first mouse-click when using the sub-tool. This allows the user to pick an area on the height map with the desired height and then flatten the surroudings to match that height. To flatten based on a specific height instead of a sample, simply uncheck the ``SampleOnMouseDown`` property. The properties of the Flatten tool are as follows:

*   ``Radius`` : :cpp:type:`Real`

    *   A Real that defines the size of the area (in the shape of a circle) to be flattened according to a sample or the value set in the property ``Height``.
    
*   ``FeatherRadius`` : :cpp:type:`Real`

    *    A Real that defines the area outside the area defined by ``Radius``, where the value of the property ``Height`` linearly interpolates down from 100% (where it meets the inner circle) to 0% (at its own outer limit).
    
*   ``Height`` : :cpp:type:`Real`

    *   A Real that defines the specific height to which one wishes to flatten a given part of the height map (set this value if not sampling from the mouse-click)
    
*   ``SampleOnMouseDown`` : :cpp:type:`Boolean`

    *   A Boolean that when checked, samples the height to which the map will be flattened. If unchecked, specify the height in the ``Height`` property.
    
.. warning:: Deprecated Properties
   The following properties are not currently functional and should not be changed from their default settings:
   
   *    ``SlopeNormal`` : :cpp:type:`Real3`
   
   *    ``SampleNormal`` : :cpp:type:`Boolean`

To flatten an area on the height map, one must first decide whether to sample a height from a surrounding point on the height map or to set the value directly in the ``Height`` property. Once a method has been chosen, simply left-click (or hold the left-mouse button) on the area to be flattened. The following screenshot shows a flattened "valley" amidst raised peaks on a height map:

|FlattenedMap|

WeightPainter
~~~~~~~~~~~~~

The WeightPainter sub-tool is used to paint textures onto a height map. In order to use the WeightPainter sub-tool, one must first make a :cpp:type:`Material` that has the ``WeightedTextures`` material block on it, as seen here:

|WeightedTexturesMaterial|

Both the ``WeightedTextures`` material block and the WeightPainter sub-tool only support four separate textures. The user must load each texture into the ``WeightedTextures`` material block, as seen here:

|WeightedTexturesWithTextures|

Once this new :cpp:type:`Material` has been applied to the :cpp:type:`HeightMap` object, one may use the WeightPainter sub-tool to select each texture separately and paint the height map with it. The ``Index`` property on the WeightPainter sub-tool gives the user access to each of the four :cpp:type:`Textures<Texture>`. The following screenshots show a height map--the one created in the :ref:`Flatten section<ManualHeightMapUsingFlatten>` above--being painted one :cpp:type:`Texture` at a time:

The height map is covered with the grass texture (``Index`` : ``Texture 0``):

|WeightPainterOne|

A dirt road traversing the grassy plain is added (``Index`` : ``Texture 1``):

|WeightPainterTwo|

The first mountain texture is added to the cliffs surrounding the valley (``Index`` : ``Texture 2``):

|WeightPainterThree|

The second mountain texture is used to fill in the rest of the mountainous area (``Index`` : ``Texture 3``):

|WeightPainterFour|

.. _ManualHeightMapRelated:

Related Materials
-----------------

Manual Pages
~~~~~~~~~~~~

*   :ref:`HeightMap Collider<ManualHeightMapCollider>`

Reference Pages
~~~~~~~~~~~~~~~

*   :cpp:type:`HeightMap`
*   :cpp:type:`Integer`
*   :cpp:type:`Real`
*   :cpp:type:`Boolean`
*   :cpp:type:`Real3`
*   :cpp:type:`Material`







.. |NoHeightMapObject|                     image:: images/HeightMapTool/NoHeightMapObject.png
.. |DefaultPatch|                          image:: images/HeightMapTool/DefaultPatch.png
.. |BumpyPatch|                            image:: images/HeightMapTool/BumpyPatch.png
.. |RaiseHeightMap|                        image:: images/HeightMapTool/RaiseHeightMap.gif
.. |LowerHeightMap|                        image:: images/HeightMapTool/LowerHeightMap.gif
.. |SmoothedSharpenedPatches|              image:: images/HeightMapTool/SmoothedSharpenedPatches.png
.. |RadiusFeatherRadius|                   image:: images/HeightMapTool/RadiusFeatherRadius.png
.. |FlattenedMap|                          image:: images/HeightMapTool/FlattenedMap.png
.. |WeightedTexturesMaterial|              image:: images/HeightMapTool/WeightedTexturesMaterial.png
.. |WeightedTexturesWithTextures|          image:: images/HeightMapTool/WeightedTexturesWithTextures.png
.. |WeightPainterOne|                      image:: images/HeightMapTool/WeightPainterOne.png
.. |WeightPainterTwo|                      image:: images/HeightMapTool/WeightPainterTwo.png
.. |WeightPainterThree|                    image:: images/HeightMapTool/WeightPainterThree.png
.. |WeightPainterFour|                     image:: images/HeightMapTool/WeightPainterFour.png