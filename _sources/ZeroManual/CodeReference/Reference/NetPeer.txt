.. _ReferenceNetPeer:

.. rst-class:: searchtitle

NetPeer
=======

.. rst-class:: searchdescription

Network Peer Acts as a host on the network Manages network object state and event replication.

.. include:: Description/NetPeer.rst

.. cpp:class:: NetPeer

    Base Class: :cpp:type:`NetObject`

.. _ReferenceNetPeerProperties:

Properties
----------

    .. rst-class:: collapsible

        .. cpp:member:: Cog NetPeer::Owner

            Get the Object this component is owned/composed. Not the parent of this composition.

    .. rst-class:: collapsible

        .. cpp:member:: Space NetPeer::Space

            The Space where the object is located.

    .. rst-class:: collapsible

        .. cpp:member:: Cog NetPeer::LevelSettings

            Get the object named'LevelSettings', a special object where we can put components for our level.

    .. rst-class:: collapsible

        .. cpp:member:: GameSession NetPeer::GameSession

            Get the GameSession that owns us and our space.

    .. rst-class:: collapsible

        .. cpp:member:: Role::Enum NetPeer::Role

            Returns the open peer's network role(client, server, offline), else Role::Unspecified.

    .. rst-class:: collapsible

        .. cpp:member:: bool NetPeer::IsClient

            Returns true if our open peer's network role is client, else false.

    .. rst-class:: collapsible

        .. cpp:member:: bool NetPeer::IsServer

            Returns true if our open peer's network role is server, else false.

    .. rst-class:: collapsible

        .. cpp:member:: bool NetPeer::IsOffline

            Returns true if our open peer's network role is offline, else false.

    .. rst-class:: collapsible

        .. cpp:member:: bool NetPeer::IsClientOrOffline

            Returns true if our open peer's network role is client or offline, else false.

    .. rst-class:: collapsible

        .. cpp:member:: bool NetPeer::IsServerOrOffline

            Returns true if our open peer's network role is server or offline, else false.

    .. rst-class:: collapsible

        .. cpp:member:: bool NetPeer::IsClientOrServer

            Returns true if our open peer's network role is client or server, else false.

    .. rst-class:: collapsible

        .. cpp:member:: bool NetPeer::IsOnline

            Returns true if the net object is online, else false.

    .. rst-class:: collapsible

        .. cpp:member:: NetObjectId NetPeer::NetObjectId

            Returns the net object ID(set if the net object is live), else 0.

    .. rst-class:: collapsible

        .. cpp:member:: NetChannelConfig NetPeer::AutomaticChannel

            Returns the automatic net channel configuration resource(assigned to net properties unless another channel is specified)

    .. rst-class:: collapsible

        .. cpp:member:: bool NetPeer::IsOpen

            Returns true if the peer is open, else false.

    .. rst-class:: collapsible

        .. cpp:member:: NetPeerId NetPeer::NetPeerId

            Returns the open peer's unique network identifier, else 0[Server/Offline] This will always be zero[Client] This will be non-zero once connected to a server, else zero.

    .. rst-class:: collapsible

        .. cpp:member:: const IpAddress NetPeer::Ipv4Address

            Returns the peer's local IPv4 address, else IpAddress() Set if the peer is open with an IPv4 socket.

    .. rst-class:: collapsible

        .. cpp:member:: String NetPeer::Ipv4Host

            Returns the peer's local IPv4 address host as a numeric address string, else String()

    .. rst-class:: collapsible

        .. cpp:member:: uint NetPeer::Ipv4Port

            Returns the peer's local IPv4 address port, else String()

    .. rst-class:: collapsible

        .. cpp:member:: const IpAddress NetPeer::Ipv6Address

            Returns the peer's local IPv6 address, else IpAddress() Set if the peer is open with an IPv6 socket.

    .. rst-class:: collapsible

        .. cpp:member:: String NetPeer::Ipv6Host

            Returns the peer's local IPv6 address host as a numeric address string, else String()

    .. rst-class:: collapsible

        .. cpp:member:: uint NetPeer::Ipv6Port

            Returns the peer's local IPv6 address port, else String()

    .. rst-class:: collapsible

        .. cpp:member:: uint NetPeer::NetObjectCount

            Returns the number of net objects in this game session(but not including the net peer itself)

    .. rst-class:: collapsible

        .. cpp:member:: uint NetPeer::NetUserCount

            Returns the number of net users in this game session.

    .. rst-class:: collapsible

        .. cpp:member:: uint NetPeer::NetSpaceCount

            Returns the number of net spaces in this game session.

    .. rst-class:: collapsible

        .. cpp:member:: uint NetPeer::LinkCount

            [Client/Server] Returns the number of connected network links managed by this peer

    .. rst-class:: collapsible

        .. cpp:member:: NetUserRange NetPeer::UsersAddedByMyPeer

            Returns the network users added by our local peer.

    .. rst-class:: collapsible

        .. cpp:member:: NetUserRange NetPeer::Users

            Returns all added network users.

    .. rst-class:: collapsible

        .. cpp:member:: uint NetPeer::UserCount

            Returns the number of added network users.

    .. rst-class:: collapsible

        .. cpp:member:: bool NetPeer::IsOwnedByAUser

            Returns true if the net object is conceptually owned by a user, else false.

    .. rst-class:: collapsible

        .. cpp:member:: bool NetPeer::IsNotOwnedByAUser

            Returns true if the net object is not conceptually owned by a user, else false.

    .. rst-class:: collapsible

        .. cpp:member:: bool NetPeer::IsMine

            Returns true if the net object is conceptually owned by a user added by our local peer, else false.

    .. rst-class:: collapsible

        .. cpp:member:: bool NetPeer::IsNotMine

            Returns true if the net object is not conceptually owned by a user added by our local peer, else false.

    .. rst-class:: collapsible

        .. cpp:member:: bool NetPeer::IsClientAndMine

            Returns true if our open peer's network role is client and the net object is conceptually owned by a user added by our local peer, else false.

    .. rst-class:: collapsible

        .. cpp:member:: bool NetPeer::IsClientButNotMine

            Returns true if our open peer's network role is client and the net object is not conceptually owned by a user added by our local peer, else false.

    .. rst-class:: collapsible

        .. cpp:member:: bool NetPeer::IsServerAndMine

            Returns true if our open peer's network role is server and the net object is conceptually owned by a user added by our local peer, else false.

    .. rst-class:: collapsible

        .. cpp:member:: bool NetPeer::IsServerButNotMine

            Returns true if our open peer's network role is server and the net object is not conceptually owned by a user added by our local peer, else false.

    .. rst-class:: collapsible

        .. cpp:member:: bool NetPeer::IsOfflineAndMine

            Returns true if our open peer's network role is offline and the net object is conceptually owned by a user added by our local peer, else false.

    .. rst-class:: collapsible

        .. cpp:member:: bool NetPeer::IsOfflineButNotMine

            Returns true if our open peer's network role is offline and the net object is not conceptually owned by a user added by our local peer, else false.

    .. rst-class:: collapsible

        .. cpp:member:: Cog NetPeer::NetUserOwner

            Returns the network user this object conceptually belongs to, else nullptr.

    .. rst-class:: collapsible

        .. cpp:member:: NetUserId NetPeer::NetUserOwnerUserId

            Returns the network user identifier of the user this object conceptually belongs to, else 0.

    .. rst-class:: collapsible

        .. cpp:member:: NetPeerId NetPeer::NetUserOwnerPeerId

            Returns the network peer identifier of the peer who added the user this object conceptually belongs to, else 0.

.. _ReferenceNetPeerMethods:

Methods
-------

    .. rst-class:: collapsible

        .. cpp:function:: void NetPeer::DebugDraw()

            Base debug draw for a component. Special for the each type of component.

    .. rst-class:: collapsible

        .. cpp:function:: bool NetPeer::Forget()

            [Client] Forgets the online net object locally[Server] Forgets the online net object locally and remotely for all relevant peers Effectively removes the net object from the network system without destroying it Returns true if successful, else false

    .. rst-class:: collapsible

        .. cpp:function:: bool NetPeer::SelectRemote()

            [Client] Selects the remote net object on the first server peer found running in another game session instance on the engine[Server] Selects the remote net object on the first client peer found running in another game session instance on the engine Will fail if the net object is not online, or not found remotely Returns true if successful, else false

    .. rst-class:: collapsible

        .. cpp:function::  NetPeer::HasNetChannel

            

    .. rst-class:: collapsible

        .. cpp:function:: bool NetPeer::HasNetChannel(NetChannelConfig netChannelConfig) const

            

    .. rst-class:: collapsible

        .. cpp:function::  NetPeer::GetNetChannel

            

    .. rst-class:: collapsible

        .. cpp:function:: NetChannel NetPeer::GetNetChannel(NetChannelConfig netChannelConfig) const

            

    .. rst-class:: collapsible

        .. cpp:function:: void NetPeer::DispatchLocal(String eventId, Event event)

            Dispatches the net event on the net object for the local peer.

    .. rst-class:: collapsible

        .. cpp:function:: void NetPeer::DispatchRemote(String eventId, Event event, NetPeerId netPeerId)

            Dispatches the net event on the net object for the remote peer In Offline mode, this calls DispatchLocal only.

    .. rst-class:: collapsible

        .. cpp:function:: void NetPeer::DispatchBroadcast(String eventId, Event event)

            Dispatches the net event on the net object for all remote peers In Offline mode, this calls DispatchLocal only.

    .. rst-class:: collapsible

        .. cpp:function:: void NetPeer::DispatchLocalAndRemote(String eventId, Event event, NetPeerId netPeerId)

            Dispatches the net event on the net object for the local peer and for the remote peer In Offline mode, this calls DispatchLocal only.

    .. rst-class:: collapsible

        .. cpp:function:: void NetPeer::DispatchLocalAndBroadcast(String eventId, Event event)

            Dispatches the net event on the net object for the local peer and for all remote peers In Offline mode, this calls DispatchLocal only.

    .. rst-class:: collapsible

        .. cpp:function:: Boolean NetPeer::Open(role : NetRole, Integer, Integer)

            

    .. rst-class:: collapsible

        .. cpp:function:: Boolean NetPeer::Open(role : NetRole, Integer)

            

    .. rst-class:: collapsible

        .. cpp:function:: bool NetPeer::Open(Role::Enum role)

            

    .. rst-class:: collapsible

        .. cpp:function:: void NetPeer::Close()

            Closes the peer(safe to call multiple times)

    .. rst-class:: collapsible

        .. cpp:function:: Boolean NetPeer::ConnectLink(ipAddress : IpAddress, EventBundle)

            

    .. rst-class:: collapsible

        .. cpp:function:: Boolean NetPeer::ConnectLink(ipAddress : IpAddress, Event)

            

    .. rst-class:: collapsible

        .. cpp:function:: bool NetPeer::ConnectLink(const IpAddress ipAddress)

            

    .. rst-class:: collapsible

        .. cpp:function:: Boolean NetPeer::DisconnectLink(netPeerId : IpAddress, EventBundle)

            

    .. rst-class:: collapsible

        .. cpp:function:: Boolean NetPeer::DisconnectLink(netPeerId : IpAddress, Event)

            

    .. rst-class:: collapsible

        .. cpp:function:: Boolean NetPeer::DisconnectLink(netPeerId : IpAddress)

            

    .. rst-class:: collapsible

        .. cpp:function:: Boolean NetPeer::DisconnectLink(netPeerId : Integer, EventBundle)

            

    .. rst-class:: collapsible

        .. cpp:function:: Boolean NetPeer::DisconnectLink(netPeerId : Integer, Event)

            

    .. rst-class:: collapsible

        .. cpp:function:: bool NetPeer::DisconnectLink(NetPeerId netPeerId)

            

    .. rst-class:: collapsible

        .. cpp:function:: Integer NetPeer::DisconnectAllLinks(EventBundle)

            

    .. rst-class:: collapsible

        .. cpp:function:: Integer NetPeer::DisconnectAllLinks(Event)

            

    .. rst-class:: collapsible

        .. cpp:function:: uint NetPeer::DisconnectAllLinks()

            

    .. rst-class:: collapsible

        .. cpp:function:: TransmissionDirection::Enum NetPeer::GetLinkCreationDirection(NetPeerId netPeerId) const

            [Client/Server] Returns the direction in which the link was created(which peer initiated the connection), else TransmissionDirection::Unspecified

    .. rst-class:: collapsible

        .. cpp:function:: LinkStatus::Enum NetPeer::GetLinkStatus(NetPeerId netPeerId) const

            [Client/Server] Returns the link's overall status, else LinkStatus::Unspecified

    .. rst-class:: collapsible

        .. cpp:function:: LinkState::Enum NetPeer::GetLinkState(NetPeerId netPeerId) const

            [Client/Server] Returns the link's specific state, else LinkState::Unspecified

    .. rst-class:: collapsible

        .. cpp:function:: IpAddress NetPeer::GetLinkIpAddress(NetPeerId netPeerId) const

            [Client/Server] Returns the remote peer's IP address(as seen from our perspective), else IpAddress() For outgoing links this is the same IP address specified in our connect call This IP address will never change for the lifetime of this link

    .. rst-class:: collapsible

        .. cpp:function:: IpAddress NetPeer::GetOurIpAddressFromLink(NetPeerId netPeerId) const

            [Client/Server] Returns our peer's IP address(as seen from their perspective), else IpAddress() For incoming links this is the same IP address specified in their connect call Set if the link is connected or incoming and attempting connection It is absolutely possible that this does not match our local IP address

    .. rst-class:: collapsible

        .. cpp:function:: InternetProtocol::Enum NetPeer::GetLinkInternetProtocol(NetPeerId netPeerId) const

            [Client/Server] Returns the link's IP address protocol version, else InternetProtocol::Unspecified This IP address protocol will never change for the lifetime of this link

    .. rst-class:: collapsible

        .. cpp:function:: NetPeerId NetPeer::GetLinkNetPeerId(const IpAddress ipAddress) const

            Returns the remote peer's unique network identifier, else 0[Server] This will be non-zero if the client is connected, else zero[Client] This will always be zero.

    .. rst-class:: collapsible

        .. cpp:function:: Boolean NetPeer::AddUser(EventBundle)

            

    .. rst-class:: collapsible

        .. cpp:function:: Boolean NetPeer::AddUser(Event)

            

    .. rst-class:: collapsible

        .. cpp:function:: bool NetPeer::AddUser()

            

    .. rst-class:: collapsible

        .. cpp:function:: Cog NetPeer::GetUser(NetUserId netUserId) const

            Returns the specified network user, else nullptr.

    .. rst-class:: collapsible

        .. cpp:function:: NetUserRange NetPeer::GetUsersAddedByPeer(NetPeerId netPeerId) const

            Returns the network users added by the specified peer.

    .. rst-class:: collapsible

        .. cpp:function:: Boolean NetPeer::RemoveUser(cog : Cog, EventBundle)

            

    .. rst-class:: collapsible

        .. cpp:function:: Boolean NetPeer::RemoveUser(cog : Cog, Event)

            

    .. rst-class:: collapsible

        .. cpp:function:: bool NetPeer::RemoveUser(Cog cog)

            

    .. rst-class:: collapsible

        .. cpp:function:: Space NetPeer::GetNetSpace(NetObjectId netObjectId) const

            Returns the live net space specified if it is known locally, else nullptr.

    .. rst-class:: collapsible

        .. cpp:function:: Cog NetPeer::GetNetObject(NetObjectId netObjectId) const

            Returns the live net object specified if it is known locally, else nullptr.

    .. rst-class:: collapsible

        .. cpp:function:: bool NetPeer::IsOwnedByUser(Cog cog) const

            Returns true if the net object is conceptually owned by the specified user, else false.

    .. rst-class:: collapsible

        .. cpp:function:: bool NetPeer::IsOwnedByPeer(NetPeerId netPeerId) const

            Returns true if the net object is conceptually owned by a user added by the specified peer, else false.

    .. rst-class:: collapsible

        .. cpp:function:: void NetPeer::SetNetUserOwnerUp(Cog cog)

            

    .. rst-class:: collapsible

        .. cpp:function:: void NetPeer::SetNetUserOwnerDown(Cog cog)

            

.. include:: Remarks/NetPeer.rst