.. _ManualColorGradient:

.. rst-class:: SearchTitle

Color Gradient
==============

.. rst-class:: SearchDescription

:cpp:type:`ColorGradient` is a :ref:`resource<ManualResources>` that allows the user to make a custom color gradient. The gradient may then be sampled from and applied as a color to any object that has a component with a color property.

Common Uses
-----------

*   Changing the color of a :cpp:type:`Sprite` or :cpp:type:`Material` within a restricted color change

*   Interpolating over a gradient to have a sprite or material change colors over time

Using ColorGradient
-------------------

Creating a ColorGradient
^^^^^^^^^^^^^^^^^^^^^^^^

A new ColorGradient may be created through the ``Add a Resource`` window:

|AddingCG|

Once the new ColorGradient has been named and created, an editor window will pop up:

|CGEditor|

As can be seen, the editor currently shows a gradient from black to white. The user may add keypoints on the gradient, however, to add in new colors by left-clicking anywhere on the gradient bar. These colors are selected via the common color selection window.

|AddingColors|

As the common color selection window is used, any value within it may be changed as well, including the alpha value.

Applying the ColorGradient
^^^^^^^^^^^^^^^^^^^^^^^^^^

Sampling from ColorGradient is done through a ColorGradient variable within ZilchScript. The value passed into ``Sample()`` must be between 0 and 1:

.. code-block:: csharp

  class GradDemo : ZilchComponent
  {
      // ColorGradient to use
      [Property]
      var ColorGrad : ColorGradient = null;

      function Initialize(init : CogInitializer)
      {
          // Set color to the value sampled halfway through the gradient
          this.Owner.Sprite.VertexColor = this.ColorGrad.Sample(0.5)
      }
  }
    
Attaching this code as a component onto a basic sprite (and selecting the ColorGradient made above for the ``ColorGrad`` property), the sprite will appear like so when running the game:

|CGSample|

One can also use code to interpolate through the ColorGraident, changing the color of the sprite over time.

.. code-block:: csharp

  class GradDemo : ZilchComponent
  {
      // ColorGradient to use
      [Property]
      var ColorGrad : ColorGradient = null;

      // Value to pass into ColorGradient's Sample() function
      var Value : Real = 0.0;
      
      function Initialize(init : CogInitializer)
      {
          // Set color to color found at start of the gradient
          this.Owner.Sprite.VertexColor = this.ColorGrad.Sample(this.Value);
          // Call function to interpolate this.Value from 0 - 1
          this.InterpolateValue();
          Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
      }
  
      function OnLogicUpdate(event : UpdateEvent)
      {
          // Update Sprite's VertexColor property with current sample from ColorGrad
          this.Owner.Sprite.VertexColor = this.ColorGrad.Sample(this.Value);
      }
      
      function InterpolateValue()
      {
          // Action to interpolate this.Value from 0 - 1 over three seconds
          Action.Property(this.Owner.Actions, @this.Value, 1.0, 3.0, Ease.Linear);
      }
  }

The above code-block accomplishes the following things:

*  Initially, it sets the color of the Sprite to the value sampled at `0` on the ColorGradient.

*  It then calls a function--``InterpolateValue()``--that uses an Action to interpolate the :cpp:type:`Real` variable ``Value`` from 0 - 1 over the course of three seconds.

*  Finally, the ``VertexColor`` property on the Sprite component is updated every frame by the value sampled from ``ColorGrad`` using ``Value``

In the following demonstration, another, smaller Sprite has been added behind the first Sprite to show how the change in Alpha value affects the appearance of the Sprite:

|InterpolatingCG|

Related Material
----------------

Reference Pages
^^^^^^^^^^^^^^^

*  :cpp:type:`ColorGradient`
*  :cpp:type:`Sprite`
*  :cpp:type:`Material`
*  :cpp:type:`Real`




.. |AddingCG|              image:: images/ColorGradient/AddingCG.png
.. |CGEditor|              image:: images/ColorGradient/CGEditor.png
.. |AddingColors|          image:: images/ColorGradient/AddingColors.gif
.. |CGSample|              image:: images/ColorGradient/CGSample.png
.. |InterpolatingCG|       image:: images/ColorGradient/InterpolatingCG.gif