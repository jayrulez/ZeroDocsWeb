.. _ManualSpriteLayer:

.. rst-class:: SearchTitle

SpriteLayer and SpriteLayerOrder
================================

.. rst-class:: SearchDescription

:cpp:type:`SpriteLayers<SpriteLayer>` are used to give an order of precedence to different :cpp:type:`Sprites<Sprite>` and/or :cpp:type:`SpriteText` that are at the same depth away from the Camera. By utilizing SpriteLayers in conjunction with :cpp:type:`SpriteLayerOrders<SpriteLayerOrder>`, the Engine can be told how to layer the images to eliminate any Z-fighting or clipping issues. 

.. _ManualSpriteLayerUsing:

Using SpriteLayers
------------------

SpriteLayers are added like any other Resource, by using :ref:`Command<ManualCommands>` : ``Add`` and selecting ``SpriteLayer``. After naming the new SpriteLayer and selecting ``Create`` the new Resource will be added to the project, however nothing will change with just adding a SpriteLayer resource as it won't be assigned to any SpriteLayerOrder yet. 

To assign any new SpriteLayers, first a new SpriteLayerOrder Resource needs to be created by using :ref:`Command<ManualCommands>` : ``Add`` and selecting ``SpriteLayerOrder``. Once created a new window will open which will allow new SpriteLayers to be applied and organized. 

.. Sidebar:: SpriteLayerOrder Limitations
    
    Regardless of how many SpriteLayerOrders are created, only one may be used at any given time on each space that exists in a project. Not only that, but Zero needs to have the SpriteLayerOrder assigned to the ``Space`` Archetype being used to load the level. Be aware that any new Spaces created using that Archetype will also be effected in the same way. 

|NewSpriteLayerOrder|

.. Sidebar:: Default Resources Best Practices

    With the exception of the default ``Space`` archetype, any other default resources that are modified will be reset once the Zero Engine has closed and restarted. Rather than attempt to modify the default resource for any that are needed, it's better to create a new resource of that type and modify that instead. 

Clicking on ``Add SpriteLayer`` will bring up a list of all existing SpriteLayers, and the chosen SpriteLayer will then be added to the bottom of the list. The list represents the order of all SpriteLayers in it, with the top of the list being the Layer the furthest back and the bottom of the list being the most forward layer. If a SpriteLayer is mistakenly added in the wrong order, or needs to be changed after the fact, simply select that SpriteLayer and click on either the ``Back`` or ``Front`` arrow to adjust it. 

|OrderAdjusting|

Once the SpriteLayerOrder has been organized as desired, it will need to be assigned to the ``GraphicsSpace`` Component on the Space Archetype. This can be found by either pressing ``Shift+S`` when the level window has focus, opening the ``Space`` Archetype in the Library Window, or using :ref:`Command<ManualCommands>` : ``SelectSpace``. Once the object is selected, in the ``GraphicsSpace`` Component change the ``SpriteLayerOrder`` Property to the desired SpriteOrderLayer.

|SpaceProperties|

Properties and Methods of SpriteLayer and SpriteLayerOrder
----------------------------------------------------------

*   :ref:`SpriteLayer Code Reference<ReferenceSpriteLayer>`
*   :ref:`SpriteLayerOrder Code Reference<ReferenceSpriteLayerOrder>`

.. _ManualSpriteLayerRelated:

Related Materials
-----------------

Tutorials
~~~~~~~~~

*   :ref:`SpriteText<TutorialText>`

Reference Pages
~~~~~~~~~~~~~~~

*   :cpp:type:`SpriteLayer`
*   :cpp:type:`Sprite`
*   :cpp:type:`SpriteText`
*   :cpp:type:`SpriteLayerOrder`

.. |NewSpriteLayerOrder|            image:: Images/SpriteLayerOrder/NewSpriteLayerOrder.png
.. |OrderAdjusting|                 image:: Images/SpriteLayerOrder/OrderAdjusting.gif
.. |SpaceProperties|                image:: Images/SpriteLayerOrder/SpaceProperties.png

.. Started by Reuben Faux