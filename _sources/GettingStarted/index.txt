.. _GettingStartedIndex:

.. rst-class:: SearchTitle

Getting Started
===============

.. rst-class:: SearchDescription

Welcome to the website for the Zero Engine, `DigiPen Institute of Technology <https://www.digipen.edu/>`_'s proprietary game engine and editor. The Zero Engine is a powerful simulation engine, custom built in C++ by DigiPen's `Research and Development <http://www.digipenresearch.com/>`_ Team (a group of DigiPen graduates and instructors).

Zero Engine Features
--------------------
The Zero Engine can be used to make 2D and 3D games, as well as simulations of any kind. Projects range from simple prototypes to realistic simulations and professional games. Versatility of the engine is made possible by the following features:

* A sophisticated, easy-to-use editor: ZED (Zero Editor)
* Advanced component-based architecture
* Support for 2D and 3D games
* Custom-built constraint-based physics engine
* Realistic flight modeling
* Dynamic 3D lighting
* Dynamic shader compositing

Site Overview
-------------

There are currently three main sections for documentation. The Zero Manual aims to be a high level explanation of all engine concepts and functionality. The tutorial section offers step by step tutorials that teach various engine functionalities. The Workshops section is a collection of past and current curriculum frameworks that teach the basics of the Zero Engine.

Installing the Zero Editor
--------------------------

Currently, only DigiPen students and faculty can use the Zero Editor. You can learn how to obtain the Zero Engine here.

*    :ref:`The Zero Engine Launcher <ManualZeroLauncher>`

or if you already know what you are doing...

*	`Download the Zero Engine Launcher here <https://zero.digipen.edu/Launcher/ZeroLauncherSetup.exe>`_

Learning the Zero Editor
------------------------

We understand that not all users have the same level of experience. So we have tried to outline the most efficient path for you to become productive in Zero. 

Beginner Users
^^^^^^^^^^^^^^

If you have never made a game or done any programming before, you can still do quite a bit with the Zero Editor.

*    Start by going through our intro :ref:`curriculum<GAM100index>` for the Engine. This will walk you through a majority of the basics of the Zero Engine in tutorial fashion.

*    Refresh yourself by reading the :ref:`Editor <ManualEditorIndex>` sections.

*    If you start feeling like you are in over your head on the programming side, check out the :ref:`Zilch in Zero <ManualZilchInZeroIndex>` Zero Manual section to really master Zilch.

*    Once you are comfortable with scripting in Zilch read the :ref:`scripting<ManualScriptingIndex>`, :ref:`architecture<ManualArchitectureIndex>`, and :ref:`gameplay<ManualGameplayIndex>` sections of the Zero Manual.

*    While not always required, the :ref:`physics<ManualPhysicsIndex>`, :ref:`graphics<ManualGraphicsIndex>`, :ref:`audio<ManualAudioIndex>`, and :ref:`user interface<ManualUIIndex>` sections are all considered core knowledge when developing in Zero.

*    If you feel like you have a grasp on the basics of how to implement gameplay functionality, try practicing a little with some simple :ref:`feature tutorials<FeatureTutorialsIndex>`.

* When you feel somewhat comfortable with the code, go through the :ref:`articles<CommunityArticlesIndex>` section to get a better sense of the common pitfalls and higher level paradigms in the engine.

*    Finally, start making your own games!

* Remember that you can always look things up in the :ref:`code reference<CodeRefIndex>`, `ask your peers for help <http://zero.digipen.edu/ask/>`_, and get developer :ref:`support<CommunityDevSupportIndex>`.

Intermediate Users
^^^^^^^^^^^^^^^^^^

If you have some experience making games and programming, you will be able to pick things up fairly quickly.

*    Start by checking out the :ref:`Zilch in Zero <ManualZilchInZeroIndex>` :ref:`Zero Manual <ManualEditorIndex>` section brush up on Zilch syntax.

*    Read the Zero Manual starting with the :ref:`Editor <ManualEditorIndex>`, :ref:`architecture<ManualArchitectureIndex>`, and :ref:`gameplay<ManualGameplayIndex>` sections to get oriented in the engine.

*    Browse :ref:`physics<ManualPhysicsIndex>`, :ref:`graphics<ManualGraphicsIndex>`, :ref:`audio<ManualAudioIndex>`, and :ref:`user interface<ManualUIIndex>` sections for topics that are applicable to your project.

*    Read the remaining Zero Manual sections at your own pace, as they are often only used in more advanced projects.

*    If you are not fully confident in your ability to start operating in the engine try out some :ref:`feature tutorials<FeatureTutorialsIndex>`.

*    Finally, start making your own games!

* Remember that you can always look things up in the :ref:`code reference<CodeRefIndex>`, `ask your peers for help <http://zero.digipen.edu/ask/>`_, and get developer :ref:`support<CommunityDevSupportIndex>`.


Advanced Users
^^^^^^^^^^^^^^

If you are an experienced programmer/designer who has used component-based engines before, you will feel right at home.

*    Skim the :ref:`Zilch in Zero <ManualZilchInZeroIndex>` Zero Manual section to brush up on Zilch syntax which should be familiar to those who have worked in ActionScript, C-Sharp, or any C-based language.

*    Read the Zero Manual starting with the :ref:`Editor <ManualEditorIndex>`, :ref:`architecture<ManualArchitectureIndex>`, and :ref:`gameplay<ManualGameplayIndex>` sections to get oriented in the engine.

*    Read the remaining Zero Manual sections at your own pace. While some such as :ref:`physics<ManualPhysicsIndex>`, :ref:`graphics<ManualGraphicsIndex>`, :ref:`audio<ManualAudioIndex>`, and :ref:`user interface<ManualUIIndex>` will most likely be used in your projects, you will most likely have general knowledge about these topics from previous work.

*    If you are not fully confident in your ability to start operating in the engine try out some :ref:`feature tutorials<FeatureTutorialsIndex>`.

*    Finally, start making your own games!

* Remember that you can always look things up in the :ref:`code reference<CodeRefIndex>`, `ask your peers for help <http://zero.digipen.edu/ask/>`_, and get developer :ref:`support<CommunityDevSupportIndex>`.
